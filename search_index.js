var documenterSearchIndex = {"docs":
[{"location":"numerical_procedure/numerical_procedure/#Numerical-Implementation","page":"Numerical Implementation","title":"Numerical Implementation","text":"","category":"section"},{"location":"numerical_procedure/numerical_procedure/#Numerical-Grid","page":"Numerical Implementation","title":"Numerical Grid","text":"","category":"section"},{"location":"numerical_procedure/numerical_procedure/","page":"Numerical Implementation","title":"Numerical Implementation","text":"WAVI.jl solves the governing equations on a rectangular grid, with n_x grid cells in the x direction and n_y grid cells in the y direction. Ice thickness values h are defined at the cell centers (see figure) of grid cells, while velocity components baru and barv are defined along grid cell edges, and shear strain rates c = (partial u partial y + partial v  partial x)2 are stored at grid corners.","category":"page"},{"location":"numerical_procedure/numerical_procedure/","page":"Numerical Implementation","title":"Numerical Implementation","text":"<center><img src=\"https://raw.githubusercontent.com/WAVI-ice-sheet-model/WAVI.jl/build-docs/docs/src/assets/grid-schematic.jpg\" alt=\"\" title=\"\" width=\"400\" height=\"400\" />\n<figcaption>Figure 1: Locations within grid cells that ice thickness $h$, velocity components $u$ and $v$, and shear strain rates $c = (\\partial u /\\partial y + \\partial v / \\partial x)/2$ are stored. </figcaption></center>","category":"page"},{"location":"numerical_procedure/numerical_procedure/","page":"Numerical Implementation","title":"Numerical Implementation","text":"The set of all such points at which the ice thickness is stored defines the h-grid. The u-grid, v-grid, and c-grid are defined analagously. Various different quantities are also stored on each of these grids, and used as part of the solution (see Fields for more information).","category":"page"},{"location":"numerical_procedure/numerical_procedure/","page":"Numerical Implementation","title":"Numerical Implementation","text":"Three dimensional fields used in the governing equations (e.g. viscosity) are stored h-grid points, extrapolated into the z direction. This grid is referred to as the sigma-grid.","category":"page"},{"location":"numerical_procedure/numerical_procedure/#Problem-Reduction","page":"Numerical Implementation","title":"Problem Reduction","text":"","category":"section"},{"location":"numerical_procedure/numerical_procedure/","page":"Numerical Implementation","title":"Numerical Implementation","text":"This section contains brief details of the procedure by which the momentum balance equations governing equations (2)–(4) are reduced to a non-linear equation for the depth average velocity barmathbfu. For full details, refer to [7].","category":"page"},{"location":"numerical_procedure/numerical_procedure/","page":"Numerical Implementation","title":"Numerical Implementation","text":"To make progress in solving the governing equations, horizontal gradients in vertical velocity are neglected and vertical shear stresses are assumed to vary linearly with depth. Then, if the ice thickness h, surface elevation h, ice stiffness, basal stresses and horizontal stress components are known, the depth integrated viscosity ","category":"page"},{"location":"numerical_procedure/numerical_procedure/","page":"Numerical Implementation","title":"Numerical Implementation","text":"beginequation\n    bareta = frac1hint_s - h^h etamathrmdz\nendequation","category":"page"},{"location":"numerical_procedure/numerical_procedure/","page":"Numerical Implementation","title":"Numerical Implementation","text":"can be computed numerically. Here eta is the ice viscosity (equation (4) in the governing equations).","category":"page"},{"location":"numerical_procedure/numerical_procedure/","page":"Numerical Implementation","title":"Numerical Implementation","text":"After depth integrating the approximation to the horizonal stress components, and using the Robin boundary condition (equation (7)), the basal velocity components – and thus basal stress terms – can be expressed in terms of the depth averaged velocity components. The basal stress components can then be eliminated from  governing equations(2)–(3), which can therefore be expressed as a non-linear problem for barmathbfu, the depth averaged velocity:","category":"page"},{"location":"numerical_procedure/numerical_procedure/","page":"Numerical Implementation","title":"Numerical Implementation","text":"beginequation\nmathcalL(barmathbfu) barmathbfu = mathbff\nendequation","category":"page"},{"location":"numerical_procedure/numerical_procedure/","page":"Numerical Implementation","title":"Numerical Implementation","text":"where","category":"page"},{"location":"numerical_procedure/numerical_procedure/","page":"Numerical Implementation","title":"Numerical Implementation","text":"beginequationlabelEoperator_problem\nmathcalL = beginpmatrix \npartial_x 4 bareta h partial_x + partial_y  bareta h partial_y - beta_texteff  partial_x 2 bareta h partial_y + partial_y  bareta h partial_x \npartial_x bareta h partial_y + partial_y 2  bareta h partial_x  partial_x  bareta h partial_x + partial_y 4 bareta h partial_y - beta_texteff \nendpmatrix\nendequation","category":"page"},{"location":"numerical_procedure/numerical_procedure/","page":"Numerical Implementation","title":"Numerical Implementation","text":"with beta_texteff an effective drag coefficient (see equation (12) in [7]).","category":"page"},{"location":"numerical_procedure/numerical_procedure/#Velocity-Solve","page":"Numerical Implementation","title":"Velocity Solve","text":"","category":"section"},{"location":"numerical_procedure/numerical_procedure/","page":"Numerical Implementation","title":"Numerical Implementation","text":"This section described very briefly the steps involved in the procedure by which the non-linear elliptic problem for the velocity (equation \\eqref{E:operator_problem}) is solved in WAVI.jl. Again, for full details, refer to [7].","category":"page"},{"location":"numerical_procedure/numerical_procedure/","page":"Numerical Implementation","title":"Numerical Implementation","text":"The problem \\eqref{E:operator_problem} is discretized with a finite difference approximation. Details of the discretization are included in the appendix of [7]. \nThe resulting problem is expressed as a symmetric saddle point problem. \nThe saddle point problem is expressed as two distinct problems. The first is solver iteratively using a BiCGSTAB method\nThe second problem is solved using an iterative method, leveraging an [LU-factorization] of the mass matrix in the problem.","category":"page"},{"location":"numerical_procedure/numerical_procedure/#Timestepping","page":"Numerical Implementation","title":"Timestepping","text":"","category":"section"},{"location":"numerical_procedure/numerical_procedure/","page":"Numerical Implementation","title":"Numerical Implementation","text":"If the system is to be solved forwards in time, the velocity must be solved simultanously with the surface elevation (i.e. equations (2)–(4) and (8)) must be solved simultanously. The procedure is largely as described above for the velocity components, but the problem is preconditioned using an iterative approach inspired by [8] to improve computational speed. Once the velocities have been solved for, the surface elecation is updated using a simple Euler scheme.","category":"page"},{"location":"references/","page":"References","title":"References","text":"D. N. Goldberg. A variationally derived, depth-integrated approximation to a higher-order glaciological flow model. Journal of Glaciology 57, 157–170 (2011).\n\n\n\nL. Favier, N. C. Jourdain, A. Jenkins, N. Merino, G. Durand, O. Gagliardini, F. Gillet-Chaulet and P. Mathiot. Assessment of sub-shelf melting parameterisations using the ocean–ice-sheet coupled model NEMO (v3. 6)–Elmer/Ice (v8. 3). Geoscientific Model Development 12, 2255–2283 (2019).\n\n\n\nP. R. Holland, A. Jenkins and D. M. Holland. The response of ice shelf basal melting to variations in ocean temperature. Journal of Climate 21, 2558–2572 (2008).\n\n\n\nW. M. Lazeroms, A. Jenkins, G. H. Gudmundsson and R. S. Van De Wal. Modelling present-day basal melt rates for Antarctic ice shelves using a parametrization of buoyant meltwater plumes. The Cryosphere 12, 49–70 (2018).\n\n\n\nA. Jenkins. A one-dimensional model of ice shelf-ocean interaction. Journal of Geophysical Research: Oceans 96, 20671–20677 (1991).\n\n\n\nR. Reese, T. Albrecht, M. Mengel, X. Asay-Davis and R. Winkelmann. Antarctic sub-shelf melt rates via PICO. The Cryosphere 12, 1969–1985 (2018).\n\n\n\nR. J. Arthern, R. C. Hindmarsh and C. R. Williams. Flow speed within the Antarctic ice sheet and its controls inferred from satellite observations. Journal of Geophysical Research: Earth Surface 120, 1171–1188 (2015).\n\n\n\nO. V. Vasilyev and N. K.-R. Kevlahan. An adaptive multilevel wavelet collocation method for elliptic problems. Journal of Computational Physics 206, 412–431 (2005).\n\n\n\n","category":"page"},{"location":"examples/mismip_plus_retreat/#MISMIP-example-(part-2)","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ example (part 2)","text":"","category":"section"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"In this example, we demonstrate the retreat experiments performed in the Marine Ice Sheet Model Intercomparison (MISMIP) (doi: 10.5194/tc-14-2283-2020). There experiments are as follows: starting from a steady state determined in MISMIP+ part 1, we enforce melt induced for 100 years (this is called the ice1r experiment in MISMIP+) followed by no melting for 100 years.","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"This example demonstrates how to:     * apply simple parametrizations of ice shelf basal melting     * chain simulations via ice thickness","category":"page"},{"location":"examples/mismip_plus_retreat/#Install-dependencies","page":"MISMIP+ part two: retreat experiments","title":"Install dependencies","text":"","category":"section"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"First let's make sure we have all required packages installed. As well as WAVI and Plots for plotting, we're going to use the Downloads package to pull some data from a Github repository.","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"using Pkg\nPkg.add(PackageSpec(url=\"https://github.com/WAVI-ice-sheet-model/WAVI.jl.git\", rev = \"main\"))\nPkg.add(\"Plots\"), Pkg.add(\"Downloads\")\nusing WAVI, Plots, Downloads, NCDatasets","category":"page"},{"location":"examples/mismip_plus_retreat/#Setting-up-the-model","page":"MISMIP+ part two: retreat experiments","title":"Setting up the model","text":"","category":"section"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"Much of the model setup is as in the MISMIP+ example; this is contained in the code below (see the MISMIP+ part one for details):","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"dx = 8.e3;\ndy = 8.e3;\nnx = round(Int, 640*1e3/dx);\nny = round(Int, 80*1e3/dx); #fix the number of grid-cells in the x and y directions to match set extents\nu_iszero = falses(nx+1,ny); #build x-direction velocity boundary condition matrix with no zero boundary conditions anywhere \nu_iszero[1,:].=true;        #set the x-direction velocity to zero at x = 0.\nv_iszero=falses(nx,ny+1);   #build x-direction velocity boundary condition matrix with no zero boundary conditions anywhere \nv_iszero[:,1].=true;        #set the y-direction velocity to zero at y = 0 (free slip)\nv_iszero[:,end].=true;       #set the y-direction velocity to zero at y = 84km (free slip)\nv_iszero[1,:].=true;         #set the y-direction velocity to zero at x = 0km (no slip in combination with u_iszero)\ngrid = Grid(nx = nx, \n            ny = ny,   \n            dx = dx, \n            dy = dy,\n            u_iszero = u_iszero, \n            v_iszero = v_iszero)\nparams = Params( accumulation_rate = 0.3);","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"However, here we use a different initial condition (namely, the ice thickness at the end of the MISMIP ice0 experiment) and apply melting. We also don't reduce the number of iterations in the velocity solve (see MISMIP+ part one), because we want the velocity to converge at each timestep.","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"To save time, we'll pull the initial condition from GitHub ( where it has been saved), rather than running the first experiment again.","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"h_init=Array{Float64}(undef,nx,ny);\nread!(Downloads.download(\"https://github.com/alextbradley/WAVI_example_data/raw/main/MISMIP_PLUS/MISMIP_ice0_steadythickness_8km.bin\"),h_init)\n\ninitial_conditions = InitialConditions(initial_thickness = h_init)","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"Next we apply the parametrization of melting. In the MISMIP+ experiment, the melt rate on floating cells is 02 tanh((z_d - z_b)75) max(-100 - z_d0). We have hard-coded this melt rate into WAVI (you can find out more about how it is constructed in the melt parametrizations example); here, we just want to show how melt rate models are coupled to WAVI models.","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"First, we make the melt model...","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"melt_rate = MISMIPMeltRateOne()","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"...and then pass it to the simulation by coupling it in the construction of the model","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"model = Model(grid = grid,\n            bed_elevation = WAVI.mismip_plus_bed, \n            initial_conditions = initial_conditions,\n            melt_rate = melt_rate);","category":"page"},{"location":"examples/mismip_plus_retreat/#Retreat-phase","page":"MISMIP+ part two: retreat experiments","title":"Retreat phase","text":"","category":"section"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"In the ice 1r experiment, we run for 100 years with the melting applied. We need to define TimesteppingParams and OutputParams` objects to control timestepping and outputs respectively.","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"timestepping_params = TimesteppingParams(dt = 0.5, \n                                        end_time = 100.,)\n            \n#make a folder for outputs\nfolder = \"mismip_2_output\"\n\n#specify output parameters\noutput_params = OutputParams(outputs = (h = model.fields.gh.h,grfrac = model.fields.gh.grounded_fraction), #output the thickness and grounded fraction, so we can compute the volume about floatation\n                            output_freq = 1., #output every year\n                            output_path = folder,\n                            zip_format = \"nc\");","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"Now we can make the simulation and run it","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"simulation = Simulation(model = model, timestepping_params = timestepping_params, output_params = output_params)\nrun_simulation!(simulation)","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"Let's plot the volume above floatation through time (volume above floatation is the volume of ice above the thickness set the Archimedean floatation condition). ","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"filename = joinpath(folder, \"outfile.nc\");\n\n# Declare variables so they can be used globally\nlocal h, grfrac, time_array, vaf\n\n# Open the NetCDF file\nDataset(filename, \"r\") do ds\n    # Read variables\n    h = ds[\"h\"][:, :, :]\n    grfrac = ds[\"grfrac\"][:]\n    time_array = ds[\"TIME\"][:]\n\n    # Initialize vaf array\n    vaf = zeros(length(time_array))\n\n    # Compute the volume above floatation\n    for i = 1:length(time_array)\n        vaf[i] = volume_above_floatation(h[:, :, i], simulation.model.fields.gh.b, Ref(simulation.model.params), simulation.model.grid)\n    end\n\n    Plots.plot(time_array, vaf[:]/1e9,\n             marker = true, \n             label = :none,\n             xlabel = \"time (years)\",\n             ylabel = \"volume above floatation (km^3)\",\n             framestyle = :box)\nend","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"<center><img src=\"../../assets/example-plots/MISMIP/ice1r_vaf.png\" alt=\"\" title=\"\" style=\"max-width: 100%\" /></center>","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"The volume above floatation decreases, indicating that the ice sheet is retreating. That's to be expected: the initial condition is in steady state with no melting, and the melting in this experiemnt is quite aggressive. ","category":"page"},{"location":"examples/mismip_plus_retreat/#Advance-phase","page":"MISMIP+ part two: retreat experiments","title":"Advance phase","text":"","category":"section"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"In the advance phase, we turn melting off. To chain this to the previous simulation, we use the thickness from the previous section as an initial condition.","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"initial_conditions_advance = InitialConditions(initial_thickness = simulation.model.fields.gh.h) #simulation.model.fields.gh.h is the current (i.e. after 100 years of simulation time) thickness of the retreat phase\nmodel_advance = Model(grid = grid,\n            bed_elevation = WAVI.mismip_plus_bed, \n            initial_conditions = initial_conditions_advance) #note: no melt rate this time\n","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"We can use the same timestepping parameters. We'll make a new output parameters object so we can output in a different place","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"#make a folder for outputs\nfolder_advance = \"mismip_advance\";\n\n#specify output parameters\noutput_params_advance = OutputParams(outputs = (h = model_advance.fields.gh.h,grfrac = model_advance.fields.gh.grounded_fraction), #output the thickness and grounded fraction, so we can compute the volume about floatation\n                            output_freq = 1., #output every year\n                            output_path = folder_advance,\n                            zip_format = \"nc\");","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"Now we can make the simulation and run it","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"simulation_advance = Simulation(model = model_advance, timestepping_params = timestepping_params, output_params = output_params_advance)\nrun_simulation!(simulation_advance)","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"Let's work out the volume above floatation evolution for this phase and add it to the earlier plot.","category":"page"},{"location":"examples/mismip_plus_retreat/","page":"MISMIP+ part two: retreat experiments","title":"MISMIP+ part two: retreat experiments","text":"filename = joinpath(folder_advance, \"outfile.nc\");\n\nlocal time_adv, vaf_adv\nDataset(filename, \"r\") do ds_advance\n    h_adv = ds_advance[\"h\"][:, :, :]\n    grfrac_adv = ds_advance[\"grfrac\"][:]\n    time_adv = ds_advance[\"TIME\"][:]\n\n    time_adv = time_adv .+ time_array[end] #shift the time by the final entry of the retreat phase\n\n    #compute the volume above floatation\n    vaf_adv = zeros(length(time_adv))\n\n    for i = 1:length(time_adv)\n        vaf_adv[i] = volume_above_floatation(h_adv[:,:,i], simulation_advance.model.fields.gh.b, Ref(simulation_advance.model.params), simulation_advance.model.grid )\n    end\nend\n\nPlots.plot(time_array, vaf[:]/1e9,\n             marker = true, \n             label = \"advance\",\n             xlabel = \"time (years)\",\n             ylabel = \"volume above floatation (km^3)\",\n             framestyle = :box)\n\nPlots.plot!(time_adv, vaf_adv[:]/1e9,\n             marker = true, \n             label = \"retreat\")","category":"page"},{"location":"physics/overview/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"physics/overview/","page":"Overview","title":"Overview","text":"WAVI.jl is a software package for the numerical solution of the hybrid equations describing the evolution of ice sheet thickness h and velocity mathbfu = (uv). Hybrid models assume that ice sheet stresses are depth independent, but vertical velocity gradients are included in the non-linear viscosity and treatment of basal stress. This means that unlike models that make the shallow-ice or shallow-shelf approximations, they are appropriate to describe both regions of fast and slow ice flow, while being computationally two-dimensional and thus far less expensive than full Stokes models. An excellent introduction to the heirarchy of different types of ice sheet model, and the physical processes they capture, can be found on the Antarctic Glaciers website.","category":"page"},{"location":"contributing/#Contributors-Guide","page":"Contributors guide","title":"Contributors Guide","text":"","category":"section"},{"location":"contributing/","page":"Contributors guide","title":"Contributors guide","text":"Thank you for considering contributing to WAVI.jl! If you're interested in contributing to the development of WAVI we want your help no matter how big or small a contribution you make! ","category":"page"},{"location":"contributing/#Table-of-Contents","page":"Contributors guide","title":"Table of Contents","text":"","category":"section"},{"location":"contributing/","page":"Contributors guide","title":"Contributors guide","text":"How to Contribute\nReporting Bugs\nSuggesting Enhancements\nCode Contribution\nPull Request Process\nLicense","category":"page"},{"location":"contributing/#How-to-Contribute","page":"Contributors guide","title":"How to Contribute","text":"","category":"section"},{"location":"contributing/#Reporting-Bugs","page":"Contributors guide","title":"Reporting Bugs","text":"","category":"section"},{"location":"contributing/","page":"Contributors guide","title":"Contributors guide","text":"If you encounter a bug, please help us fix it by following these steps:","category":"page"},{"location":"contributing/","page":"Contributors guide","title":"Contributors guide","text":"Ensure the bug is not already reported by checking the issue tracker.\nIf the bug isn't reported, open a new issue. Clearly describe the issue, including steps to reproduce it.","category":"page"},{"location":"contributing/#Suggesting-Enhancements","page":"Contributors guide","title":"Suggesting Enhancements","text":"","category":"section"},{"location":"contributing/","page":"Contributors guide","title":"Contributors guide","text":"If you have ideas for enhancements, new features, or improvements, we'd love to hear them! Follow these steps:","category":"page"},{"location":"contributing/","page":"Contributors guide","title":"Contributors guide","text":"Check the issue tracker to see if your suggestion has been discussed.\nIf not, open a new issue, providing a detailed description of your suggestion and the use case it addresses.","category":"page"},{"location":"contributing/#Code-Contribution","page":"Contributors guide","title":"Code Contribution","text":"","category":"section"},{"location":"contributing/","page":"Contributors guide","title":"Contributors guide","text":"If you'd like to contribute code to the project:","category":"page"},{"location":"contributing/","page":"Contributors guide","title":"Contributors guide","text":"Fork the repository.\nClone your fork: git clone https://github.com/WAVI-ice-sheet-model/WAVI.jl\nCreate a new branch for your changes: git checkout -b feature-branch\nMake your changes and commit them with a clear message.\nPush your changes to your fork: git push origin feature-branch\nOpen a pull request against the main branch of the main repository.","category":"page"},{"location":"contributing/#Local-development","page":"Contributors guide","title":"Local development","text":"","category":"section"},{"location":"contributing/","page":"Contributors guide","title":"Contributors guide","text":"To set up WAVI for local development (e.g. to contribute or test changes), follow these steps:","category":"page"},{"location":"contributing/","page":"Contributors guide","title":"Contributors guide","text":"Clone the repository and create branch as needed (above section):","category":"page"},{"location":"contributing/","page":"Contributors guide","title":"Contributors guide","text":"git clone https://github.com/WAVI-ice-sheet-model/WAVI.jl.git\ncd WAVI.jl","category":"page"},{"location":"contributing/","page":"Contributors guide","title":"Contributors guide","text":"Lets say this is cloned to: /git/WAVI.jl.","category":"page"},{"location":"contributing/#Editable-install","page":"Contributors guide","title":"Editable install","text":"","category":"section"},{"location":"contributing/","page":"Contributors guide","title":"Contributors guide","text":"If you would like to use your local WAVI code in another project (i.e. outside of the WAVI repo), do the following from that project directory:","category":"page"},{"location":"contributing/","page":"Contributors guide","title":"Contributors guide","text":"julia> ]\n\n(@v1.12) pkg>activate .\n\n(@v1.12) pkg>develop /git/WAVI.jl","category":"page"},{"location":"contributing/","page":"Contributors guide","title":"Contributors guide","text":"This adds WAVI to your current project environment in editable mode, pointing to your local clone. Any changes you make to the code in /git/WAVI.jl will take effect immediately — just restart your Julia session or re-include the relevant files to see the updates.","category":"page"},{"location":"contributing/","page":"Contributors guide","title":"Contributors guide","text":"Make sure to update /git/WAVI.jl in the above example to match the actual location where you cloned the WAVI.jl repo.","category":"page"},{"location":"contributing/#Pull-Request-Process","page":"Contributors guide","title":"Pull Request Process","text":"","category":"section"},{"location":"contributing/","page":"Contributors guide","title":"Contributors guide","text":"Please ensure your pull request follows these guidelines:","category":"page"},{"location":"contributing/","page":"Contributors guide","title":"Contributors guide","text":"Adheres to the coding standards.\nIncludes relevant tests for new functionality.\nHas a clear commit history and messages.\nReferences the relevant issue if applicable.","category":"page"},{"location":"contributing/","page":"Contributors guide","title":"Contributors guide","text":"Please don't hesistate to get in touch to discuss, or with any questions!","category":"page"},{"location":"contributing/#License","page":"Contributors guide","title":"License","text":"","category":"section"},{"location":"contributing/","page":"Contributors guide","title":"Contributors guide","text":"By contributing to this project, you agree that your contributions will be licensed under the LICENSE file of this repository.","category":"page"},{"location":"examples/mismip_plus/#MISMIP-example-(part-1)","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ example (part 1)","text":"","category":"section"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"This example shows how to recreate the Marine Ice Sheet Model Intercomparison (MISMIP) (doi: 10.5194/tc-14-2283-2020) experiments. In this intercomparison exercise, a two-dimensional ice sheet is considered, with a grounding line that can stabilize on a section of bed which has a locally positive slope in the flow direction (commonly called retrograde). This is interesting because grounding lines on retrograde bedslopes are theoretically unstable in one horizontal dimension (see doi: 10.1029/2006JF000664), demonstrating the importance of variations in the second dimension for buttressing ice sheets. Note that here we use a very coarse (8km) resolution for computational speed. In this example, we demonstrate the MISMIP+ ice0 experiment, where the simulation is run to steady state with no melting; the other MISMIP+ experiments are shown in other examples.","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"This example demonstrates how to ","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"apply boundary conditions\ncontrol the number of iterations in the velocity solve\nzip the output into nc file format","category":"page"},{"location":"examples/mismip_plus/#Install-dependencies","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"Install dependencies","text":"","category":"section"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"First let's make sure we have all required packages installed.","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"using Pkg\nPkg.add(PackageSpec(url=\"https://github.com/WAVI-ice-sheet-model/WAVI.jl.git\", rev = \"main\"))\nPkg.add(\"Plots\")\nPkg.add(\"NCDatasets\")\nusing WAVI, Plots, NCDatasets","category":"page"},{"location":"examples/mismip_plus/#Basal-Topography","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"Basal Topography","text":"","category":"section"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"The MISMIP+ domain is 640km in the x-direction and 80km in the y-direction, centred around y = 0. The basal topography is given by z_b = max B_x(x) + B_y(y) -720 where B_x(x) is a sixth order, even polynomial and B_y(y) introduces two bumps in the domain. We write this analytic bed expression as a function","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"function mismip_plus_bed(x,y)\n    xbar = 300000.0\n    b0 = -150.0; b2 = -728.8; b4 = 343.91; b6 = -50.75;\n    wc = 24000.0; fc = 4000.0; dc = 500.0;\n    bx(x)=b0+b2*(x/xbar)^2+b4*(x/xbar)^4+b6*(x/xbar)^6;\n    by(y)= dc*( (1+exp(-2(y-wc)/fc))^(-1) + (1+exp(2(y+wc)/fc))^(-1) );\n    b = max(bx(x) + by(y), -720.0);\n    return b;\nend","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"First, let's take a look at this bed. First we'll use a nice high resolution grid to get a nice plot, but when we run the simulation, we'll use a lower resolution for computational efficiency","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"dx = 1.e3;\ndy = 1.e3;\nnx = round(Int, 640*1e3/dx);\nny = round(Int, 80*1e3/dx);\nxx=[i*dx for i=1:nx, j=1:ny];\nyy=[j*dy for i=1:nx, j=1:ny] .- 42000;\nx = xx[:,1];\ny = yy[1,:];\n\n# Now we can plot\nplt =  Plots.heatmap(x/1e3, y/1e3, mismip_plus_bed.(xx,yy)', \n                    xlabel = \"x (km)\", \n                    ylabel = \"y (km)\",\n                    colorbar_title = \"\\n bed depth (m)\",\n                    right_margin = 4Plots.mm)\nplot!(size = (600,400))","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"<center><img src=\"../../assets/example-plots/MISMIP/mismip_bed.png\" alt=\"\" title=\"\" style=\"max-width: 100%\" /></center>","category":"page"},{"location":"examples/mismip_plus/#Boundary-Conditions","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"Boundary Conditions","text":"","category":"section"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"In the MISMIP+ experiment, no slip (zero velocity in both directions) boundary conditions are applied at x = 0, and free-slip boundary conditions (zero velocity in the direction normal to the walls) are applied at the lateral boundaries at y = 0km and y = 84km. First, let's redefine the grid size to be lower resolution (to make the later simulations quicker)","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"dx = 8.e3;\ndy = 8.e3;\nnx = round(Int, 640*1e3/dx);\nny = round(Int, 80*1e3/dx); #fix the number of grid-cells in the x and y directions to match set extents","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"Velocity boundary conditions are controlled by specifying zeros in appropriate entries in arrays, which are then passed to the grid. We first build arrays, and then populate them with entries which enforce the boundary conditions:","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"u_iszero = falses(nx+1,ny); #build x-direction velocity boundary condition matrix with no zero boundary conditions anywhere \nu_iszero[1,:].=true;        #set the x-direction velocity to zero at x = 0.\nv_iszero=falses(nx,ny+1);   #build x-direction velocity boundary condition matrix with no zero boundary conditions anywhere \nv_iszero[:,1].=true;        #set the y-direction velocity to zero at y = 0 (free slip)\nv_iszero[:,end].=true;       #set the y-direction velocity to zero at y = 84km (free slip)\nv_iszero[1,:].=true;         #set the y-direction velocity to zero at x = 0km (no slip in combination with u_iszero)","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"Now we build the grid as usual, passing the arrays we just constructed via optional arguments. ","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"grid = Grid(nx = nx, \n            ny = ny,   \n            dx = dx, \n            dy = dy,\n            u_iszero = u_iszero, \n            v_iszero = v_iszero)","category":"page"},{"location":"examples/mismip_plus/#Solver-Parameters","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"Solver Parameters","text":"","category":"section"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"In the first MISMIP experiment, we're want to get to the final steady state, and don't really care about the solution state along the way. In particular, we don't need to get the velocity right along the way, we just want have it correct eventually. We therefore set the number of iterations in the velocity solve to be small: at each timestep, the solver just does a small number of iterations, and the velocity is only approximate. But, since we do a lot of iterations getting to steady state, the velocity gets to the right thing eventually. The number of iterations in the velocity solve and other parameters relating to how the equations are solved, are set via a SolverParams object:","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"solver_params = SolverParams(maxiter_picard = 1)","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"Explicitly, we set the number of iterations (formally, Picard iterations) to be as small as possible, i.e. one iteration.","category":"page"},{"location":"examples/mismip_plus/#Make-the-model","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"Make the model","text":"","category":"section"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"Now we have our grid, bed, and solver parameters, we just need to set the appropriate initial conditions and physical parameters for MISMIP+, and then we can build our model. In MISMIP+, the initial condition is 100m thick ice everywhere and the accumulation rate is 0.3m/a:","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"initial_conditions = InitialConditions(initial_thickness = 100 .* ones(nx,ny));\nparams = Params( accumulation_rate = 0.3);","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"Note that all other parameter values in WAVI have defaults set to the MISMIP+ values.","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"Now let's make our model! Note that we use the functional form of the bed:","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"model = Model(grid = grid,\n            bed_elevation = mismip_plus_bed, \n            initial_conditions = initial_conditions,\n            params = params, \n            solver_params = solver_params)","category":"page"},{"location":"examples/mismip_plus/#Assembling-the-Simulation","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"Assembling the Simulation","text":"","category":"section"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"To get to steady state, we need to run our simulation for a good chunk of time, on the order of tens of 1000s of years. We'll run for 10000 years, with a timestep of half a year:","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"timestepping_params = TimesteppingParams(dt = 0.5, \n                                        end_time = 10000.,)","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"Note that as in other example, we have to specify the end time as 10000. (a float number) rather than 10000 (an integer) because WAVI.jl expects the same numeric type for the timestep dt and the end time end_time.","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"We'll output the solution along the way, and use this to convince ourselves later than we are in steady state. ","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"First we define our output parameters. We'll output the thickness and grounded fraction every 200 years, and set the zip_format keyword argument to zip the output files to an nc format when the simulation is finished.","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"folder = \"mismip_1_output\"\noutput_params = OutputParams(outputs = (h = model.fields.gh.h,grfrac = model.fields.gh.grounded_fraction),\n                            output_freq = 200.,\n                            output_path = folder,\n                            zip_format = \"nc\");","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"Now we assemble our simulation, taking in the model, output parameters and timestepping_params:","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"simulation = Simulation(model = model, timestepping_params = timestepping_params, output_params = output_params)","category":"page"},{"location":"examples/mismip_plus/#Timestepping","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"Timestepping","text":"","category":"section"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"Now all that's left to do is run our simulation! This is a long simulation and might take a while (~10 mins on my laptop)","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"run_simulation!(simulation)","category":"page"},{"location":"examples/mismip_plus/#Visualization","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"Visualization","text":"","category":"section"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"Let's have a look at the steady state thickness:","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"Plots.heatmap(simulation.model.grid.xxh[:,1]/1e3, simulation.model.grid.yyh[1,:]/1e3, simulation.model.fields.gh.h', \n                xlabel = \"x (km)\", \n                ylabel = \"y (km)\",\n                colorbar_title = \"\\n ice thickness (m)\", \n                right_margin = 4Plots.mm)","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"And add the grounding line, which is where the grounded fraction transitions between 0 and 1 (grounded_fraction takes the value 1 at fully grounded grid points and 0 at fully floating grid points.) Our choice of 0.5 is somewhat arbitrary here – any value between 0 and 1 will do!","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"Plots.contour!(simulation.model.grid.xxh[:,1]/1e3, \n            simulation.model.grid.yyh[1,:]/1e3,\n            simulation.model.fields.gh.grounded_fraction',\n            fill = false,\n            levels = [0.5,0.5],\n            linecolor = :blue,\n            linewidth = 2)\nplot!(size = (600,400))","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"You can see, by comparing with the plot of the bed earlier, that the grounding line sits on an overdeepened section of the bed! You can also compare it with the other MISMIP submissions (figure 3 in Cornford et al., 2020) and see that the grounding line position agrees pretty well with other models, despite being lower resolution.","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"<center><img src=\"../../assets/example-plots/MISMIP/mismip_thickness_and_gl.png\" alt=\"\" title=\"\" style=\"max-width: 100%\" /></center>","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"Finally, let's check that it's in steady state, by looking at the evolution of the volume above floatation:","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"filename = joinpath(folder, \"outfile.nc\");\n<<<<<<< HEAD\n\nds = NCDataset(filename, \"r\") do ds\n    h_data = ds[\"h\"][:, :, :]\n    grfrac_data = ds[\"grfrac\"][:, :, :]\n    time_data = ds[\"TIME\"][:]\n\n    #compute the volume above floatation\n    vaf = zeros(length(time_data)) \n\n    for i = 1:length(time_data)\n        vaf[i] = volume_above_floatation(h_data[:, :, i], \n                                         simulation.model.fields.gh.b, \n                                         Ref(simulation.model.params), \n                                         simulation.model.grid)\n    end\n\n    return time_data, vaf\nend\n\ntime, vaf = ds\n\nPlots.plot(time, vaf[:]/1e9,\n=======\nh = ncread(filename, \"h\");\ngrfrac = ncread(filename, \"grfrac\");\ntm = ncread(filename, \"TIME\");\n#compute the volume above floatation\nvaf = zeros(1,length(tm))\nfor i = 1:length(tm)\n    vaf[i] = volume_above_floatation(h[:,:,i], simulation.model.fields.gh.b, Ref(simulation.model.params), simulation.model.grid )\nend\nPlots.plot(tm, vaf[:]/1e9,\n>>>>>>> f78657e349634950e3aeebd5b278a0bf6b94d87b\n             marker = true, \n             label = :none,\n             xlabel = \"time (years)\",\n             ylabel = \"volume above floatation (km^3)\",\n             framestyle = :box)","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"The volume above floatation reaches a plateau, suggesting that we have indeed reached a steady state.","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"<center><img src=\"../../assets/example-plots/MISMIP/mismip_vaf_evolution.png\" alt=\"\" title=\"\" style=\"max-width: 100%\" /></center>","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"Finally, we clear up the files we just outputted","category":"page"},{"location":"examples/mismip_plus/","page":"MISMIP+ part one: grounding lines on overdeepened bed","title":"MISMIP+ part one: grounding lines on overdeepened bed","text":"rm(folder, force = true, recursive = true)","category":"page"},{"location":"physics/damage/#Damage","page":"Damage","title":"Damage","text":"","category":"section"},{"location":"physics/damage/","page":"Damage","title":"Damage","text":"Why is ice damage important?\nWhere does it enter into the equations in WAVI.jl?\nModels for ice damage coming soon.","category":"page"},{"location":"installation_instructions/#Installation-instructions","page":"Installation instructions","title":"Installation instructions","text":"","category":"section"},{"location":"installation_instructions/#Overview","page":"Installation instructions","title":"Overview","text":"","category":"section"},{"location":"installation_instructions/","page":"Installation instructions","title":"Installation instructions","text":"You can install the latest version of WAVI using the built-in package manager to add the package and instantiate/build all dependencies:","category":"page"},{"location":"installation_instructions/","page":"Installation instructions","title":"Installation instructions","text":"julia> using Pkg\n\njulia> Pkg.add(url=\"https://github.com/WAVI-ice-sheet-model/WAVI.jl\")\n\njulia> Pkg.instantiate()","category":"page"},{"location":"installation_instructions/","page":"Installation instructions","title":"Installation instructions","text":"or, alternatively, you can use the shortcut ] to trigger the Pkg REPL and run these simplified commands:","category":"page"},{"location":"installation_instructions/","page":"Installation instructions","title":"Installation instructions","text":"julia> ]\n\n(@v1.12) pkg>add https://github.com/WAVI-ice-sheet-model/WAVI.jl\n\n(@v1.12) pkg>instantiate","category":"page"},{"location":"installation_instructions/#Branch-selection","page":"Installation instructions","title":"Branch selection","text":"","category":"section"},{"location":"installation_instructions/","page":"Installation instructions","title":"Installation instructions","text":"The above will install the WAVI code in the 'main' branch. To install code contained on a different branch, use the rev flag:","category":"page"},{"location":"installation_instructions/","page":"Installation instructions","title":"Installation instructions","text":"julia> using Pkg\n\njulia> Pkg.add(url=\"https://github.com/WAVI-ice-sheet-model/WAVI.jl\", rev=\"BranchName\")\n\njulia> Pkg.instantiate()","category":"page"},{"location":"installation_instructions/","page":"Installation instructions","title":"Installation instructions","text":"where BranchName should be replaced by the name of the branch containing the code you wish to install. ","category":"page"},{"location":"installation_instructions/","page":"Installation instructions","title":"Installation instructions","text":"Note that WAVI is only tested on Julia versions 1.5 and newer; stability cannot be guaranteed on newer versions!","category":"page"},{"location":"installation_instructions/","page":"Installation instructions","title":"Installation instructions","text":"At this time, updating should be done with care, as WAVI is under rapid development. While we take care to avoid breaking changes, they may happen during this time. If anything does break, please open an issue and let us know!","category":"page"},{"location":"API/melt_rate_models/#Melt-Rates","page":"Basal Melt Rate Models","title":"Melt Rates","text":"","category":"section"},{"location":"API/melt_rate_models/","page":"Basal Melt Rate Models","title":"Basal Melt Rate Models","text":"WAVI.jl has a number of community melt rate parametrizations/models (referred to here collectively as 'melt rates') implemented and ready to use. Details of the physics of these models can be found on the melt rate physics page. This page provides a description of how to endow ice sheet models with a melt rate model/parametrization, as well as the interface of each of those that are implemented in WAVI.jl.","category":"page"},{"location":"API/melt_rate_models/#Adding-a-Melt-Rate-to-a-WAVI.jl-Model","page":"Basal Melt Rate Models","title":"Adding a Melt Rate to a WAVI.jl Model","text":"","category":"section"},{"location":"API/melt_rate_models/","page":"Basal Melt Rate Models","title":"Basal Melt Rate Models","text":"Melt rates is WAVI.jl are interfaced via MeltRate objects. To build an ice sheet model with a melt rate, simply build the appropriate MeltRate object and then pass it to the Model when the latter is constructed.","category":"page"},{"location":"API/melt_rate_models/","page":"Basal Melt Rate Models","title":"Basal Melt Rate Models","text":"This is best demonstrated by example: we first build a simple ice sheet model on a 20 x 20 grid, with a bed that is 50 m below sea level:","category":"page"},{"location":"API/melt_rate_models/","page":"Basal Melt Rate Models","title":"Basal Melt Rate Models","text":"grid = Grid(nx = 20, ny = 20)\nbed_elevation = 50.0 * ones(grid.nx, grid.ny)","category":"page"},{"location":"API/melt_rate_models/","page":"Basal Melt Rate Models","title":"Basal Melt Rate Models","text":"We then build our melt rate model. Let consider a simple case in which the melt rate is assumed to depend quadratically on the thermal forcing:","category":"page"},{"location":"API/melt_rate_models/","page":"Basal Melt Rate Models","title":"Basal Melt Rate Models","text":"melt_rate = QuadraticMeltRate();","category":"page"},{"location":"API/melt_rate_models/","page":"Basal Melt Rate Models","title":"Basal Melt Rate Models","text":"Finally, build the ice sheet model and pass the melt rate model","category":"page"},{"location":"API/melt_rate_models/","page":"Basal Melt Rate Models","title":"Basal Melt Rate Models","text":"model = Model(grid = grid, bed_elevation = bed_elevation, melt_rate = melt_rate)","category":"page"},{"location":"API/melt_rate_models/#Analytic-Melt-Rate-Parametrizations","page":"Basal Melt Rate Models","title":"Analytic Melt Rate Parametrizations","text":"","category":"section"},{"location":"API/melt_rate_models/","page":"Basal Melt Rate Models","title":"Basal Melt Rate Models","text":"Documentation coming soon!","category":"page"},{"location":"API/melt_rate_models/#Input-File-Melt-Rates","page":"Basal Melt Rate Models","title":"Input File Melt Rates","text":"","category":"section"},{"location":"API/melt_rate_models/","page":"Basal Melt Rate Models","title":"Basal Melt Rate Models","text":"Documentation coming soon!","category":"page"},{"location":"API/melt_rate_models/#Quadratic-Melt-Rate","page":"Basal Melt Rate Models","title":"Quadratic Melt Rate","text":"","category":"section"},{"location":"API/melt_rate_models/","page":"Basal Melt Rate Models","title":"Basal Melt Rate Models","text":"A QuadraticMeltModel – the melt rate used to implement the quadratic temperature melt rate parametrization is constructed using the QuadraticMeltModel(<kwargs>) constructor. ","category":"page"},{"location":"API/melt_rate_models/","page":"Basal Melt Rate Models","title":"Basal Melt Rate Models","text":"A QuadraticMeltModel accepts the following keyword arguments:","category":"page"},{"location":"API/melt_rate_models/","page":"Basal Melt Rate Models","title":"Basal Melt Rate Models","text":"h (required): array of ice thickness values at grid points\nmelt_partial_cell (default: false): specify whether to apply melt to partially floating cells or not.\nlambda_1 (default: -0.057): liquidus slope\nlambda_2 (default: 0.0832): liquidus intercept\nlambda_3 (default: 7.59e-4): liquidus pressure coefficient.\ngamma_T (default 99.32e-5): heat exchange velocity. Note that gamma_T is typically used as a tuning parameter, the default value is the tuned value from [2].\nL (default 3.35e-5): latent heat of fusion\nrho_s (default 1028.0): sea water density\nrho_i (default 918.0): ice density\nc_p (default 3974.0): specific heat capacity of ocean\nS_0: far-field practical salinity profile (units: psu), passed to the constructor as a function of depth. The default is the 'warm0' profile used in [2].\nT_0: far-field potential temperature profile (units: ^circC), passed to the constructor as a function of depth. The default is the 'warm0' profile used in [2].","category":"page"},{"location":"API/melt_rate_models/","page":"Basal Melt Rate Models","title":"Basal Melt Rate Models","text":"Ambient temperature and salinity profiles are passed to PlumeEmulator objects via the Ta and Sa keyword arguments, respectively. These must be passed as single valued functions of depth (i.e. temporal dependence in the ambient conditions is not yet supported). Ta and Sa default to the warm ambient profiles used in ISOMIP experiments (referred to as 'warm0' therein), with a lower layer of temperature 1.2∘C and salinity 34.6PSU separated from an upper layer of temperature -1∘C and salinity 33.8PSU by a pycnocline of thickness 400m, which begins at a depth of 700m below sea level.","category":"page"},{"location":"API/melt_rate_models/#Plume-Emulator-Melt-Rates","page":"Basal Melt Rate Models","title":"Plume Emulator Melt Rates","text":"","category":"section"},{"location":"API/melt_rate_models/","page":"Basal Melt Rate Models","title":"Basal Melt Rate Models","text":"The plume model emulator of Lazeroms2018 is implemented via a PlumeEmulator object. Parameters used in plume model emulator melt rates are specified by keyword arguments passed to PlumeEmulator objects; these summarized in the following table:","category":"page"},{"location":"API/melt_rate_models/","page":"Basal Melt Rate Models","title":"Basal Melt Rate Models","text":"Keyword Argument Description Units Default Value\nα Calibration coefficient Dimensionless 0.73\nλ1 Liquidus slope ∘C -0.057\nλ2 Liquidus intercept ∘C 0.0832\nλ3 Liquidus pressure coefficient ∘C/m 7.59e-4\nE0 Entrainment coefficient Dimensionless 3.6e-2\nCd Drag coefficient Dimensionless 2.5e-3\nΓ_TS Combination Stanton number Dimensionless 0.0118\nL Latent heat of ice fusion J/kg 3.35e5\nc Water specific heat capacity J/kg/∘C 3.974e3\nβs Haline contraction coefficient 1/PSU 7.86e-4\nβt Thermal expansion coefficient 1/∘C 3.87e-5\ng Gravitational acceleration m/s^2 9.81\nρi Ice density kg/m^3 918.0\nρw Water density kg/m^3 1028.0","category":"page"},{"location":"API/melt_rate_models/","page":"Basal Melt Rate Models","title":"Basal Melt Rate Models","text":"Ambient temperature and salinity profiles are passed to PlumeEmulator objects via the Ta and Sa keyword arguments, respectively. These must be passed as single valued functions of depth (i.e. temporal dependence in the ambient conditions is not yet supported). Ta and Sa default to the warm ambient profiles used in ISOMIP experiments (referred to as 'warm0' therein), with a lower layer of temperature 1.2∘C and salinity 34.6PSU separated from an upper layer of temperature -1∘C and salinity 33.8PSU by a pycnocline of thickness 400m, which begins at a depth of 700m below sea level.","category":"page"},{"location":"API/melt_rate_models/#PICO-Melt-Rate-Parametrization","page":"Basal Melt Rate Models","title":"PICO Melt Rate Parametrization","text":"","category":"section"},{"location":"API/melt_rate_models/","page":"Basal Melt Rate Models","title":"Basal Melt Rate Models","text":"Documentation coming soon!","category":"page"},{"location":"API/melt_rate_models/#PICOp-Melt-Rate-Parametrization","page":"Basal Melt Rate Models","title":"PICOp Melt Rate Parametrization","text":"","category":"section"},{"location":"API/melt_rate_models/","page":"Basal Melt Rate Models","title":"Basal Melt Rate Models","text":"Documentation coming soon!","category":"page"},{"location":"examples/melt_parametrizations/#Melt-rates-parametrizations","page":"Melt rate parametrizations","title":"Melt rates parametrizations","text":"","category":"section"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"This example demonstrates the how to use melt rate parametrizations in WAVI.jl. We first demonstrate the parametrizations included in WAVI.jl, by producing a map of the melt rate for each of these in the MISMIP+ steady state geometry. (MISMIP+ is the latest ice sheet model intercomparison exercise, for more info see doi:10.5194/tc-14-2283-2020) Explicitly, these parametrizations are:","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"Quadratic melt rates\nA plume melt emulator\nPICO melt rate model\nBinary file melt rate","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"You can find more info on each of these models in the Physics –> Melt Rates tab.","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"Secondly, we demonstrate how to add a simple melt rate model to WAVI.jl.","category":"page"},{"location":"examples/melt_parametrizations/#Install-dependencies","page":"Melt rate parametrizations","title":"Install dependencies","text":"","category":"section"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"First let's make sure we have all required packages installed. As well as WAVI and Plots for plotting, we're going to use the Downloads package to pull some data from a Github repository.","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"using Pkg\nPkg.add(PackageSpec(url=\"https://github.com/WAVI-ice-sheet-model/WAVI.jl.git\", rev = \"main\"))\nusing WAVI, Plots, Downloads","category":"page"},{"location":"examples/melt_parametrizations/#Model-Setup","page":"Melt rate parametrizations","title":"Model Setup","text":"","category":"section"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"First we'll make the grid. The MISMIP+ grid has length 640km and 80km in the x and y directions, respectively. We're going to choose 2km resolution in both directions, i.e. 320 grid points in the x-direction and 40 grid points in the y-direction.","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"nx = 320;\nny = 40;\ngrid = Grid(nx=nx,ny=ny,dx=2000.,dy=2000.);","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"For the bed, we'll cheat a little and use the \"hard coded\" form of the MISMIP+ bed (see the \"MISMIP+\" example to see how to define this bed properly)","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"bed = WAVI.mismip_plus_bed # function definition","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"To allow us to focus on the melt rate parametrizations, we're not going to run a simulation to define the steady state ice thickness, but rather pull it from Github, where it is stored as a binary file. (Note that this ice thickness is the result of the \"MISMIP+\" example, but with 2km resolution.)","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"fname = Downloads.download(\"https://github.com/alextbradley/WAVI_example_data/raw/main/MISMIP_PLUS/WAVI_ice0_2km_thick.bin\");\nh = Array{Float64,2}(undef, nx, ny);\nread!(fname, h);\nh = ntoh.(h);\n# (The final line simply converts the endianness from big-endian --  the format in which this file is stored -- to little-endian.)","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"Now we make an InitialConditions object to store this ice thickness","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"global initial_conditions = InitialConditions(initial_thickness = h);","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"(We make this a global variable because we'll use it in a loop later.)","category":"page"},{"location":"examples/melt_parametrizations/#Melt-Rate-Models","page":"Melt rate parametrizations","title":"Melt Rate Models","text":"","category":"section"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"We'll loop over each of the melt rate models mentioned above. For each, we'll produce a map of the melt rate in the MISMIP+ geometry that we just downloaded.","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"First let's make the melt rate models in turn, starting with quadratic, which is imposed on the model via a QuadraticMeltRate object","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"melt_quad = QuadraticMeltRate(γT = 0.745*1e-3)","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"The parameter gamma_T is a normalization cofficient. The value here is chosen so that the mean melt rate on the shelf is approx 10m/a. (See the \"WAVI Setup\" –>  \"Melt Rate Models\" section for information on all keyword parameters, here and for the below models.)","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"Next up: PICO. For this parametrization, we first have to make a mask defining where the ice front is, and then pass it as a keyword argument when we instantiate the PICO melt rate object.","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"ice_front_mask = zeros(nx,ny);\nice_front_mask[end,:] .= 1; #this tells julia that the ice front is at the downstream end of the domain\nmelt_PICO = PICO(ice_front_mask = ice_front_mask, \n                    T0 = 1.2, \n                    S0 = 34.6, \n                    γT = 0.87e-5, \n                    nbox = 5);","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"Again, gamma_T is a normalization coefficient.","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"Next up: plume model emulator:","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"melt_PME = PlumeEmulator(α=1.49);","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"In this case, the normalization coefficent is named alpha, and has a slightly different meaning to gamma_T above, but we use it in the same role: to the set the mean melt rate on the shelf.","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"Finally, a binary file melt rate, in which the melt rate is read in from a binary file. First, we'll create such a file, which will set the melt rate to be uniform on the shelf.","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"isfloat = (h .< -918.0/1028.0 .* bed.(grid.xxh, grid.yyh)) #indices of floating elements\nm = zeros(nx,ny);\nm[isfloat] .= 10.0; #set everywhere floating to 10m/a\nfolder = \"melt_rate_parametrizations\";\nisdir(folder) && rm(folder, force = true, recursive = true);\nmkdir(folder) ;\nout = open(joinpath(folder,\"melt.bin\"), \"w\");\nwrite(out, m);\nclose(out);","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"Now we instantiate out melt rate opject, pointing it to this file we just created:","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"binfile_melt = BinfileMeltRate(input_filename = joinpath(folder,\"melt.bin\"))","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"It's useful to put these into a dictionary, so we can iterate over them. Again, we use a global variable to facilitate this","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"global melt_rates = Dict(\"Quadratic\" => melt_quad, \"PME\" => melt_PME, \"PICO\" => melt_PICO, \"Binary file\" => binfile_melt)","category":"page"},{"location":"examples/melt_parametrizations/#Visualization","page":"Melt rate parametrizations","title":"Visualization","text":"","category":"section"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"We'll loop over the melt rate models instantiated above. Each time, we make a WAVI.jl Model with the appropriate melt rate parametrization specified via the melt_rate keyword.  We use the update_state! method to bring the melt (as well as all other quantities, such as the grounded fraction) in line with the specified thickness, and then plot the melt rate. (We also set the number of Picard iterations to 1 – each time we do an update_state! we perform a velocity solve; in this example, we don't care about the velocity solve being completely accurate, so we'll do the minimum number of iterations in this process!)","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"for (key, melt) in melt_rates\n    #instantiate the model with the appropriate melt rate\n    local model = Model(grid = grid,\n            bed_elevation = bed, \n            initial_conditions = initial_conditions,\n            solver_params = SolverParams(maxiter_picard=1),\n            melt_rate = melt);\n\n    #bring quantities in line with the thickness\n    update_state!(model);\n\n    #extract the melt rate, remove any grounded entries and saturate the melt rate to 50 m/a\n    mcopy= deepcopy(model.fields.gh.basal_melt)\n    mcopy[model.fields.gh.grounded_fraction .== 1.] .= NaN\n    msat = deepcopy(mcopy)\n    msat[msat .> 50] .= 50\n\n    #plot the melt rate\n    plt = Plots.heatmap(model.grid.xxh[:,1]/1e3, model.grid.yyh[1,:]/1e3, msat', \n                        xlabel = \"x (km)\", \n                        ylabel = \"y (km)\",\n                        colorbar_title = \"melt rate (m/yr)\",\n                        title = key,\n                        framestyle = \"box\")\n    xlims!((420, 640))\n    plot!(size = (500,300))\n\n    # save the figure\n    savefig(plt, joinpath(folder, \"$key.png\"))\n    display(plt) #uncomment to show in (e.g.) VSCode\nend","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"<center><img src=\"../../assets/example-plots/melt_parametrizations/quadratic.png\" alt=\"\" title=\"\" style=\"max-width: 100%\" /></center>","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"<center><img src=\"../../assets/example-plots/melt_parametrizations/pico.png\" alt=\"\" title=\"\" style=\"max-width: 100%\" /></center>","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"<center><img src=\"../../assets/example-plots/melt_parametrizations/plume.png\" alt=\"\" title=\"\" style=\"max-width: 100%\" /></center>","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"<center><img src=\"../../assets/example-plots/melt_parametrizations/binary.png\" alt=\"\" title=\"\" style=\"max-width: 100%\" /></center>","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"As a sanity check, the binary file melt rate has the same (10m/a)melt rate over the whole shelf. The PICO parametrization, which divides the shelf up into discrete chunks, has a corresponding banded structure, with highest melt rates at the grounding line (note the different colourbar limits on the various plots!). The quadratic melt rate parametrizations similarly has the highest melt rate near the grounding line, but drops off with distance from the grounding line much quicker than the PICO parametrization. These plots can be compared to corresponding results for the NEMO ocean model  (Favier et al. 2019 doi:10.5194/gmd-12-2255-2019)","category":"page"},{"location":"examples/melt_parametrizations/#Defining-A-New-Melt-Rate-Model","page":"Melt rate parametrizations","title":"Defining A New Melt Rate Model","text":"","category":"section"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"In this section, we show how to specify a new melt rate model. NB: This is experimental and still in development. It is also a bit tricky and requires knowledge of constructors and julia's type system. We're more than happy to help: please get in touch!","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"There are four steps to creating a new melt rate model:","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"Create a file to store code\nDefine the appropriate structure, which stores information required to prescribe the melt rate\nDefine a constructor of this structure\nWrite a function to update the melt rate appropriately, and export this","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"This is quite abstract, so let's do an example. We'll create a melt rate model which sets the melt rate as it is specified in the MISMIP+ experiment, where the melt rate on floating cells is 02 tanh((z_d - z_b)75) max(-100 - z_d0), where z_d is the ice shelf draft and z_d - z_b is the cavity thickness.  We'll follow the steps above: first, we create a file to store the code. For this example, we've already create the file, you can see it at it at ./src/MeltRate/mismip_melt_rate.jl.","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"Next we define a structure, which stores parameters related to the melt rate model. Note that the melt rate model does not \"own\" the melt rate, the model does (and stores it in model.fields.gh.basal_melt, see below)","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"struct MISMIPMeltRateOne{T <: Real} <: AbstractMeltRate \n    α  :: T\n    ρi :: T\n    ρw :: T\nend","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"In this case, the parameters are: a normalization coefficient alpha, and the denisities of ice and ocean, rho_i and rho_w, respectively. ","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"Now we define our \"constructor\", a function that defines how to create one of these structures:","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"MISMIPMeltRateOne(; α = 1.0, ρi = 918.0, ρw = 1028.0) = MISMIPMeltRateOne(α,ρi, ρw)","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"In this case, the constructor simply sets the default values for the parameters alpha, rho_i, and rho_w. NB: for more complicated melt rate models, constructors might be more elaborate! You can see constructors for the various models considered above by diving into the ./src/MeltRate folder.","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"The final step is to define a function update_melt_rate!(melt_rate::TYPE, fields, grid) which tells WAVI how to update the melt rate in this example. Here, TYPE is the name of the structure we just made (e.g. update_melt_rate!(melt_rate::MISMIPMeltRateOne, fields, grid)).","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"Note that the arguments of this function must be as mentioned here, so that the multiple dispatch capability of julia can be leveraged!  Effectively, what we're doing is defining another method (think: function) named update_melt_rate!, which sets the melt rate according to this function when the input melt rate is of type \"TYPE\". Each of the melt rate models listed above has one of these functions. ","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"function update_melt_rate!(melt_rate::MISMIPMeltRateOne, fields, grid) \n    draft = -(melt_rate.ρi / melt_rate.ρw) .* fields.gh.h\n    cavity_thickness = draft .- fields.gh.b\n    cavity_thickness = max.(cavity_thickness, 0)\n    m =  melt_rate.α .* 0.2*tanh.(cavity_thickness./75).*max.((-100 .- draft), 0)\n    fields.gh.basal_melt[:] .= m[:]\nend","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"Finally, we tell point WAVI to this code by adding include(\"mismip_melt_rate.jl\") to the file \"src/MeltRate/MeltRate.jl\", and add this structure to the export section in \"src/WAVI.jl\" file. (We already did this for this MISMIP melt rate!)","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"Now we can create a model which takes this melt rate and plot the result:","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"model = Model(grid = grid,\n            bed_elevation = bed, \n            initial_conditions = initial_conditions,\n            solver_params = SolverParams(maxiter_picard=1),\n            melt_rate = MISMIPMeltRateOne());\n\nupdate_state!(model);\nm = deepcopy(model.fields.gh.basal_melt)\nm[model.fields.gh.grounded_fraction .== 1.] .= NaN\nmsat = deepcopy(m)\nmsat[msat .> 50] .= 50\n\nplt = Plots.heatmap(model.grid.xxh[:,1]/1e3, model.grid.yyh[1,:]/1e3, msat', \n            xlabel = \"x (km)\", \n            ylabel = \"y (km)\",\n            colorbar_title = \"melt rate (m/yr)\",\n            title = \"MISMIP melt rate\",\n            framestyle = \"box\")\nxlims!((420, 640))\nplot!(size = (500,300))\n#display(plt)","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"<center><img src=\"../../assets/example-plots/melt_parametrizations/mismip.png\" alt=\"\" title=\"\" style=\"max-width: 100%\" /></center>","category":"page"},{"location":"examples/melt_parametrizations/","page":"Melt rate parametrizations","title":"Melt rate parametrizations","text":"Hopefully this example demonstrates the procedure for adding melt rate models to WAVI.jl. If there are any questions, don't hesistate to get in touch (see the \"Contact Us\" tab)","category":"page"},{"location":"examples/planar_1D_flow/#Planar-One-Dimensional-Flow","page":"First example: one-dimensional planar flow","title":"Planar One-Dimensional Flow","text":"","category":"section"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"This a WAVI.jl's simplest example: flow down a flat plane in one horizontal dimension. This example demonstrates how to:","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"load WAVI.jl\ninstantiate an WAVI.jl model\nupdate ice velocities\noutput solutions\ntime-step a model forward\nlook at results","category":"page"},{"location":"examples/planar_1D_flow/#Install-dependencies","page":"First example: one-dimensional planar flow","title":"Install dependencies","text":"","category":"section"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"First let's make sure we have all required packages installed.","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"using Pkg\nPkg.add(PackageSpec(url=\"https://github.com/WAVI-ice-sheet-model/WAVI.jl.git\", rev = \"main\"))\nPkg.add(\"Plots\")\nusing WAVI, Plots","category":"page"},{"location":"examples/planar_1D_flow/#Instantiating-and-configuring-a-model","page":"First example: one-dimensional planar flow","title":"Instantiating and configuring a model","text":"","category":"section"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"We first build a WAVI model, by passing it a grid containing information about the problem we would like to solve.","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"Below, we build a grid with 300 grid points in the x direction. We use 2 grid points in the y direction which is equivalent to being one-dimensional. This grid has a resolution of 12km.","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"grid = Grid(nx = 300, ny = 2, dx = 12000.0, dy = 12000.0);","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"Next, we write a function which defines the bed (note that WAVI.jl accepts both functions and arrays of the same size as the grid as bed inputs, but here we'll use a function for simplicity). You can read more about functions in julia here","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"function bed_elevation(x,y)  \n    B = 720 - 778.5 * x ./ (750e3)\n    return B\nend","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"This bed drops a height of 778.5m in every 750km, where the latter is a typical length scale for the Antarctic ice sheet.","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"Next we specify physical parameters via a Params object. In this case, we set the accumulation rate (the net snowfall) and leave all other parameters at their default values. ","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"params = Params(accumulation_rate = 0.3);","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"Let's also set the initial thickness (i.e. at the start of the simulation) of the ice to be 300m everywhere. Initial conditions in WAVI are set via InitialConditions objects:","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"initial_conditions = InitialConditions(initial_thickness = 300. .* ones(grid.nx, grid.ny));","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"Now we are ready to build a Model by assembling these pieces:","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"model = Model(grid = grid, bed_elevation = bed_elevation, params = params, initial_conditions = initial_conditions);","category":"page"},{"location":"examples/planar_1D_flow/#Updating-the-model-state","page":"First example: one-dimensional planar flow","title":"Updating the model state","text":"","category":"section"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"Having built the model, we can solve for the ice velocities associated with the geometry we set via the initial conditions. To do so, we use the update_state! function, which takes a model and updates the velocities to be in line with the geometry.","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"update_state!(model)","category":"page"},{"location":"examples/planar_1D_flow/#Visualizing-the-solutions","page":"First example: one-dimensional planar flow","title":"Visualizing the solutions","text":"","category":"section"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"Now let's plot the ice profile and ice velocity, starting with the bed. We'll use julia's Plots.jl package to plot. Note that we make plot objects sequentially, and then use the display command to show them.","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"ice_plot = plot(model.grid.xxh[:,1]/1e3, model.fields.gh.b[:,1], \n                linewidth = 2,\n                linecolor = :brown,\n                label = \"bed\",\n                xlabel = \"x (km)\",\n                ylabel = \"z (m)\");","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"Then we add the ice surface...","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"plot!(ice_plot, model.grid.xxh[:,1]/1e3, model.fields.gh.s[:,1],\n                linewidth = 2,\n                linecolor = :blue,\n                label = \"ice surface\");","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"...and finally the ice base","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"plot!(ice_plot, model.grid.xxh[:,1]/1e3, model.fields.gh.s[:,1] .- model.fields.gh.h[:,1],\n                linewidth = 2,\n                linecolor = :red,\n                label = \"ice base\");\n\ndisplay(ice_plot)","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"<center><img src=\"../../assets/example-plots/planar_1D_flow/ice-profile.png\" style=\"max-width: 100%\" /></center>","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"We see that the ice shelf goes afloat when the ice base is approximately 270m below sea level, which fits which Archimedean floatation principles: 270m is the product of the ratio of the densities of ice (about 900 km/m^3) and ocean (about 1000 kg/m^3) with the ice thickness (300m).","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"Now lets have a look at the velocity in the ice. We'll make a new plot for this:","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"vel_plot = plot(model.grid.xxh[:,1]/1e3, model.fields.gh.u[:,1],\n                linewidth = 2,\n                label = \"ice velocity\",\n                xlabel = \"x (km)\",\n                ylabel = \"ice velocity (m/yr)\");\ndisplay(vel_plot)","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"<center><img src=\"../../assets/example-plots/planar_1D_flow/ice-velocity.png\" alt=\"\" title=\"\" style=\"max-width: 100%\" /></center>","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"We see that ice velocities are very small (but non-zero, although not obvious from the plot) in the grounded ice, where friction between the ice and the bed restrains the flow. In the shelf, where there is no basal friction, velocities increase linearly to a maximum of 12km/yr (very fast!) at the downstream end of the shelf.","category":"page"},{"location":"examples/planar_1D_flow/#Advancing-in-time:-running-a-simulation","page":"First example: one-dimensional planar flow","title":"Advancing in time: running a simulation","text":"","category":"section"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"Now, let's think about advancing time. To do so, we set up a simulation via a Simulation object, which can be time-stepped to advance the simulation and also manages output.","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"First we define a TimesteppingParams object, which holds parameters related to timestepping. Let's set the model to run for 10 years with a timestep of 0.5 years:","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"timestepping_params = TimesteppingParams(dt = 0.5, end_time = 100.);","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"(Note that the end time end_time and timestep dt must be floating point numbers – we're working on fixing this!). Now we can build the Simulation object...","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"simulation = Simulation(model = model, timestepping_params = timestepping_params);","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"...and run it, which will timestep the solution for 100 years ","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"run_simulation!(simulation);","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"Our simulation ran! The object simulation holds all the information about the state at time 10 years. Note that the current model state can be accessed via simulation.model, so we could use the above plotting commands to look at the geometry and velocity, if we wanted. ","category":"page"},{"location":"examples/planar_1D_flow/#Outputting-the-solution","page":"First example: one-dimensional planar flow","title":"Outputting the solution","text":"","category":"section"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"Our simulation ran successfully, but we don't have any information about what happened. We get around this by outputting the solution regularly. To do so, we first make a clean folder where solution files will go:","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"folder = \"planar_one_dimensional_flow\" # the name of the directory\nmkdir(folder) #make the folder","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"What to output and when to output it is specified by an instance of an OutputParams objects. Let's set one up so that the ice thickness, (unchanging) bed, ice surface and ice velocity is output every year, including at the first timestep:","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"output_params = OutputParams(outputs = (h = model.fields.gh.h,u = model.fields.gh.u, b = model.fields.gh.b,s = model.fields.gh.s), #which fields to output\n                            output_freq = 10.,    #how frequently to output\n                            output_path = folder, #where to store the results\n                            output_start = true); #flag to output the state before the first timestep","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"Note that the outputs keyword argument takes a named tuple, which points to the locations of fields that are to be outputted. As in the timestepping_params, the output frequency must be a floating point number.","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"Let's build a new simulation, which knows about the outputting via the OutputParams object","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"simulation = Simulation(model = model, timestepping_params = timestepping_params, output_params = output_params)","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"...and run it (nb this might take a few mins, depending on the spec of your pc!)","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"run_simulation!(simulation)","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"The simulation will run and output the results as it goes.","category":"page"},{"location":"examples/planar_1D_flow/#Visualizing-the-results","page":"First example: one-dimensional planar flow","title":"Visualizing the results","text":"","category":"section"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"Let's look at how the shape of the ice sheet changes during the simulation. We'll plot the surface elevation for each of the output files (i.e. every 10 years). To do so, we first have to fetch the results: we'll loop over the output files and put the thickness and surface info a matrix","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"files = [joinpath(folder, file) for file in readdir(folder) if endswith( joinpath(folder, file), \".jld2\") ] ;\nnout = length(files);\nh_out = zeros(simulation.model.grid.nx, nout);\nsurface_out = zeros(simulation.model.grid.nx, nout);\nbase_out = zeros(simulation.model.grid.nx, nout);\nt_out = zeros(1,nout);\n\nfor i = 1:nout\n    d = load(files[i]);\n    h_out[:,i] = d[\"h\"][:,1];\n    base_out[:,i] = d[\"s\"][:,1] .- d[\"h\"][:,1];\n    surface_out[:,i] = d[\"s\"][:,1];\n    t_out[i] = d[\"t\"];\nend","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"Now lets make the plot.","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"pl = Plots.plot(simulation.model.grid.xxh[:,1], simulation.model.fields.gh.b[:,1], \n                    linecolor = :brown,\n                    xlabel = \"x (km)\",\n                    ylabel = \"z (m)\", \n                    legend = :none,\n                    ylim=(-500,500))\nPlots.plot!(pl,simulation.model.grid.xxh[:,1], surface_out, legend = :none, linecolor = :blue)\nPlots.plot!(pl,simulation.model.grid.xxh[:,1], base_out, legend = :none, linecolor = :red)","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"As time proceeds, the ice sheet accelerates, causing thinning. ","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"<center><img src=\"../../assets/example-plots/planar_1D_flow/ice-evolution.png\" alt=\"\" title=\"\" style=\"max-width: 100%\" /></center>","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"Finally, we clear up the files we just outputted","category":"page"},{"location":"examples/planar_1D_flow/","page":"First example: one-dimensional planar flow","title":"First example: one-dimensional planar flow","text":"rm(folder, force = true, recursive = true);","category":"page"},{"location":"API/output_writing/#Output-Writing","page":"Output Writing","title":"Output Writing","text":"","category":"section"},{"location":"API/output_writing/","page":"Output Writing","title":"Output Writing","text":"Parameters relating to writing solution data are stored in an OutputParams structure. Data is output as individual files at a user-specified interval, and may be zipped to a single file once the simulation has completed.","category":"page"},{"location":"API/output_writing/","page":"Output Writing","title":"Output Writing","text":"The key parameters, which are passed via keyword arguments in the OutputParams constructor, are as follows:","category":"page"},{"location":"API/output_writing/","page":"Output Writing","title":"Output Writing","text":"outputs: a named tuple that points to data fields to be output. Variable names used in the output are those specified in the named tuple. For example, to set the outputs to be the ice sheet thickness, named h, and the ice sheet surface elevation, named s, we would first instantiate a Model (here named model) and set outputs = (h = model.fields.gh.h, s = model.fields.gh.s).","category":"page"},{"location":"API/output_writing/","page":"Output Writing","title":"Output Writing","text":"note: Note\nIf only outputting a single field, you must include a comma so that Julia interprets it as a named tuple, e.g. outputs = (h = model.fields.gh.h,).","category":"page"},{"location":"API/output_writing/","page":"Output Writing","title":"Output Writing","text":"note: Note\nVariables named x, y, and TIME are reserved for the spatial and temporal dimensions and are therefore not permitted as variable names.","category":"page"},{"location":"API/output_writing/","page":"Output Writing","title":"Output Writing","text":"output_freq: the model time frequency with which the simulation is output. Note that WAVI works with the number of timesteps per output, calculated as floor(output_freq/dt) where dt is the simulation timestep. If output_freq is not an integer multiple of dt, this will introduce differences in the actual output frequency, and that specified by the user.\noutput_format specifies the file format that the solution are to be saved in. Currently only .jld2 and .mat file formats are supported. \nprefix specifies the prefix of solution files. Output files are saved as <prefix>_xxxxxxxxxx.jld where xxxxxxxxxx is the timestep number at which this solution was outputted, prepended with zeros to be ten digits in length. \noutput_path specifies the path (relative or absolute) into which the solution is outputted. Note that if the specified path does not exist, outputs will be written to the local directory. \nzip_format specifies the format that solution files are zipped into. Currently WAVI.jl only supports zipping to an nc format. \ndump_vel is a shortcut to dump the velocity at the end of a simulation. This is an experimental feature, necessary for coupling WAVI to the MITgcm (see the MITgcm coupling tab).","category":"page"},{"location":"API/output_writing/#WAVI.OutputParams-Tuple{}","page":"Output Writing","title":"WAVI.OutputParams","text":"OutputParams(; \n    outputs = (),\n    output_freq = Inf, \n    output_format = \"jld2\",\n    prefix = \"outfile\", \n    output_path = \"./\",\n    dump_vel = false,\n    zip_format = \"none\",\n    output_start = false)\n\nConstruct a WAVI.jl output parameters object.\n\nKeyword arguments\n\noutputs:  a tuple of entries defining names and quantities to be outputted\noutput_freq: quantity specifying hwo frequently to produce output \noutput_format: specify output format (currently only .mat and .jld2 outputs are supported, selected with 'mat' or 'jld2' options)\nprefix: prefix to be prepended onto file names\noutput_path: path on which to output filese\ndump_vel: flag to toggle whether or not dumping the velocity after the final timestep (used in mitgcm coupling)\nzip_format: specify whether or not to zip the output, and the format (currently only '.nc' output supported, use flag 'nc')\noutput_start: flag to specify whether to output at the zeroth time step    \n\n\n\n\n\n","category":"method"},{"location":"examples/WAIS/#West-Antarctic-Ice-Sheet-(WAIS)","page":"Real world: West Antarctic Ice Sheet","title":"West Antarctic Ice Sheet (WAIS)","text":"","category":"section"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"This is our first real world example. We produce a map of approximate ice velocity in West Antarctica. This example demonstrates:","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"the capability of WAVI.jl in real world examples\nhow to specify the solution mask h_mask, which defines which grid points are part of the ice domain.\nhow to specify a spatially variable initial ice viscosity","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"NB the files included here are intended as a full demonstration of WAVI.jl capability, but should not be interpreted as \"ready to go\" for scientific inquiry; please get in touch if you would like to use these files for science!","category":"page"},{"location":"examples/WAIS/#Install-dependencies","page":"Real world: West Antarctic Ice Sheet","title":"Install dependencies","text":"","category":"section"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"First let's make sure we have all required packages installed. We're also going to use the Downloads package to pull some data from a Github repository.","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"using Pkg\nPkg.add(\"https://github.com/WAVI-ice-sheet-model/WAVI.jl\")\nusing WAVI, Downloads, Plots","category":"page"},{"location":"examples/WAIS/#Reading-in-data","page":"Real world: West Antarctic Ice Sheet","title":"Reading in data","text":"","category":"section"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"First, let's define our grid sizes and origin. We have a grid with 164 cells in the x direction and 192 in the y direction, with 5km resolution. We're going to use 12 levels in the vertical: even though WAVI.jl is designed for the solution of depth integrated equations, it retains some information about the vertical direction e.g. in the calculation of the ice viscosity; the keyword argument nσ, which is passed to a Grid object, specifies the number of levels in the vertical. We refer to the extension of the 2D (horizontal) grid to nsigma levels in the vertical as the 3D grid, which has size nx times ny times nsigma.","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"nx = 164        #number of x grid points\nny = 192        #number of y grid pointd\nnσ = 12         #number of sigma grid points\nx0 = -1802500.0 #origin of the grid in x\ny0 = -847500.0  #origin of the grid in y\ndx = 5000.0     #grid resolution in x\ndy = 5000.0     #grid resolution in y","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"We're going to download and read in the following data files:","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"h_mask     : array of zeros and ones defining the ice domain (zero corresponds to out of domain, one to in domain).\nu_iszero   : location of grid points with zero velocity in x, effectively a boundary condition\nv_iszero   : location of grid points with zero velocity in y, effectively a boundary condition\nbed        : the bed elevation, which is a processed form of data from Bedmachine V3.\nh          : ice thickness , defined on the 2D grid\nviscosity  : the initial ice viscosity, defined on the 3D grid ","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"We'll download them from GitHub, where they're stored in an external repo","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"We need the first three of these before we can build a grid:","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"h_mask=Array{Float64}(undef,nx,ny); #initialize mask array\nread!(Downloads.download(\"https://github.com/alextbradley/WAVI_example_data/raw/main/WAIS/Inverse_5km_h_mask_clip_BedmachineV3.bin\"),h_mask); #download the file and populate the h_mask array (can ignore the filename)\nhm = ntoh.(h_mask); #set to big endian\nhm = map.(Bool, round.(Int, hm)); #map everything to a boolean\n\nu_iszero=Array{Float64}(undef,nx+1,ny);\nread!(Downloads.download(\"https://github.com/alextbradley/WAVI_example_data/raw/main/WAIS/Inverse_5km_uiszero_clip_BedmachineV3.bin\"),u_iszero);\nu_iszero.=ntoh.(u_iszero);\nu_iszero = map.(Bool, round.(Int, u_iszero));\n\nv_iszero=Array{Float64}(undef,nx,ny+1);\nread!(Downloads.download(\"https://github.com/alextbradley/WAVI_example_data/raw/main/WAIS/Inverse_5km_viszero_clip_BedmachineV3.bin\"),v_iszero);\nv_iszero.=ntoh.(v_iszero);\nv_iszero = map.(Bool, round.(Int, v_iszero));","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"Now that we have these, we can build a grid:","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"grid = Grid(nx = nx, ny = ny, nσ = nσ, x0 = x0, y0 = y0, dx = dx, dy = dy, h_mask = hm, u_iszero = u_iszero, v_iszero = v_iszero)","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"Before moving on, let's have a look at the h_mask (i.e. which grid points are in the domain) using the spy function, which indicates which entries of a matrix are non-zero:","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"Plots.spy(hm)","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"<center><img src=\"../../assets/example-plots/WAIS/hmask_spy.png\" alt=\"\" title=\"\" style=\"max-width: 100%\" /></center>","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"Those familiar with it will recognise the ice fronts of Pine Island, Thwaites and Smith ice shelves and the drainage basins of their glaciers. For those not familiar, trust me: this is a rough outline of the Amundsen sea sector of West Antarctica! ","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"Next up: the bed, which will be passed to a model via the bed_elevation keyword article:","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"bed=Array{Float64}(undef,nx,ny);\nread!(Downloads.download(\"https://github.com/alextbradley/WAVI_example_data/raw/main/WAIS/Inverse_5km_bed_clip_noNan_BedmachineV3.bin\"),bed);\nbed.=ntoh.(bed)","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"Let's take a look at the bed","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"plt = Plots.heatmap(grid.xxh[:,1]/1e3, grid.yyh[1,:]/1e3, bed', \n                    xlabel = \"x (km)\", \n                    ylabel = \"y (km)\",\n                    colorbar_title = \"\\n bed elevation (m)\",\n                    right_margin = 4Plots.mm,                 #set the margin so that the colorbar title isn't cut off\n                    title = \"West Antarctica bed elevation\",\n                    framestyle = \"box\")","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"<center><img src=\"../../assets/example-plots/WAIS/WAIS_bed.png\" alt=\"\" title=\"\" style=\"max-width: 100%\" /></center>","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"It's a little hard to see here, but the bed gets deeper towards the right of the plot, which is the direction of retreat of Thwaites and Pine Island Glaciers. This might lead to feedbacks which promote their retreat (the so-called 'marine ice sheet instability').","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"Initial temperature, damage, viscosity, and thickness will be passed to a model via initial conditions (these quantities are time dependent and would evolve with the simulation)","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"temp=Array{Float64}(undef,nx,ny,nσ);\nread!(Downloads.download(\"https://github.com/alextbradley/WAVI_example_data/raw/main/WAIS/Inverse_5km_3Dtemp_clip_noNan_BedmachineV3.bin\"),temp);\ntemp.=ntoh.(temp);\n\ndamage=Array{Float64}(undef,nx,ny,nσ);\nread!(Downloads.download(\"https://github.com/alextbradley/WAVI_example_data/raw/main/WAIS/Inverse_5km_damage3D_clip_noNan_BedmachineV3.bin\"),damage);\ndamage.=ntoh.(damage);\n\nh=Array{Float64}(undef,nx,ny);\nread!(Downloads.download(\"https://github.com/alextbradley/WAVI_example_data/raw/main/WAIS/Inverse_5km_thickness_clip_noNan_BedmachineV3.bin\"),h);\nh.=ntoh.(h);\n\nviscosity=Array{Float64}(undef,nx,ny,nσ);\nread!(Downloads.download(\"https://github.com/alextbradley/WAVI_example_data/raw/main/WAIS/Inverse_5km_viscosity3D_clip_noNan_BedmachineV3.bin\"),viscosity);\nviscosity.=ntoh.(viscosity);\n\ninitial_conditions = InitialConditions(initial_thickness = h,initial_viscosity = viscosity,initial_temperature = temp,initial_damage = damage)","category":"page"},{"location":"examples/WAIS/#Ice-Velocity","page":"Real world: West Antarctic Ice Sheet","title":"Ice Velocity","text":"","category":"section"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"#Now we're ready to make our model, which we can then use to determine the ice velocity. We'll let all physical and solver parameters take their default values by not passing a Params or SolverParams object to the model.","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"model = Model(grid = grid, bed_elevation = bed,initial_conditions= initial_conditions)","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"We use the update_state! method to bring fields (including velocity) in line with the ice thickness (note, this may take a few mins!)","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"update_state!(model)","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"Now we can visualize the ice velocity, which is stored in the model fields via model.fields.gh.av_speed:","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"plt = Plots.heatmap(grid.xxh[:,1]/1e3, grid.yyh[1,:]/1e3, model.fields.gh.av_speed', \n                    xlabel = \"x (km)\", \n                    ylabel = \"y (km)\",\n                    colorbar_title = \"\\n ice speed (m/yr)\",\n                    title = \"West Antarctica ice speed\",\n                    framestyle = \"box\",\n                    right_margin = 4Plots.mm,                 \n                    clim=(0,4000))","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"<center><img src=\"../../assets/example-plots/WAIS/WAIS_velocs.png\" alt=\"\" title=\"\" style=\"max-width: 100%\" /></center>","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"Ice velocities on ice shelves can be above 5km/yr! Inland, they're smaller.","category":"page"},{"location":"examples/WAIS/","page":"Real world: West Antarctic Ice Sheet","title":"Real world: West Antarctic Ice Sheet","text":"If you wanted, you could evolve the ice thickness by setting up a Simulation object. You can find details on how to set up timestepping in other examples.","category":"page"},{"location":"API/initial_conditions/#Initial-Conditions","page":"Initial Conditions","title":"Initial Conditions","text":"","category":"section"},{"location":"API/initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"Information on the initial state of a model is stored in an InitialConditions object. The following table summarizes the quantities which can be initialized in WAVI.jl. Each of these is set by passing an appropriately sized array to keyword argument in the constructor of (instance of an) InitialConditions object. Here nx and ny are the number of grid cells in the x and y directions, respectively, and nσ is the number of levels in the vertical. None of the keywords arguments listed below are necessary in constructing an InitialConditions object. (Indeed, it is not necessary to pass an InitialConditions object to a Model at all.) Quantities not specified will default to the scalar values defualt_xxxxx (which are stored in a Params object) listed below, applied everywhere.","category":"page"},{"location":"API/initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"Keyword Argument Description Array Size Default value\ninitial_thickness Ice thickness at time t = 0 nx x ny default_thickness\ninitial_viscosity Three dimensional ice viscosity at time t = 0 nx x ny x nσ default_viscosity\ninitial_temperature Three dimensional ice temperature at time t = 0 nx x ny x nσ default_temperature\ninitial_damage Three dimensional ice damage at time t = 0 nx x ny x nσ default_damage","category":"page"},{"location":"API/initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"For example, to set the ice thickness and temperature to 500m and 265K, respectively, everywhere, we would define the following initial conditions object:","category":"page"},{"location":"API/initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"initial_conditions = InitialConditions(initial_thickness = 500.0 .* ones(nx,ny), \n                                       initial_temperature = 265.0 * ones(nx,ny,nσ))","category":"page"},{"location":"API/initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"We would then pass this to the constructor of a model:","category":"page"},{"location":"API/initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"model = Model(..., initial_conditions = initial_conditions)","category":"page"},{"location":"API/initial_conditions/","page":"Initial Conditions","title":"Initial Conditions","text":"In this model, the (unset) damage and viscosity would take the values params.default_damage and params.default_viscosity everywhere, respectively. ","category":"page"},{"location":"API/simulations/#Simulations","page":"Simulations","title":"Simulations","text":"","category":"section"},{"location":"API/simulations/","page":"Simulations","title":"Simulations","text":"The Simulation object is at the heart of WAVI.jl. (An instance of) a Simulation is constructed by passing an instance of a Model, an instance of a TimesteppingParams object, and (optionally) an instance of an OutputParams object, e.g.","category":"page"},{"location":"API/simulations/","page":"Simulations","title":"Simulations","text":"simulation = Simulation(model = model, output_params = output_params, timestepping_params = timestepping_params)","category":"page"},{"location":"API/simulations/#WAVI.Simulation-Tuple{}","page":"Simulations","title":"WAVI.Simulation","text":"Simulation(;\n        model = nothing,\n        timestepping_params = nothing,\n        output_params = OutputParams(),\n        pickup_output_update_flag = false)\n\nConstruct a WAVI.jl Simulation object.\n\nKeyword arguments\n\nmodel: (required) an instance of a Model object\ntimestepping_params: (required) an instance of a TimesteppingParams object, which stores information relating to timestepping\noutput_params: an instance of an OutputParams object, which stores information relating to outputting of solutions\npickup_output_update_flag: a flag which specifies whether to update the output_params upon picking up.\n\n\n\n\n\n","category":"method"},{"location":"API/solver_parameters/#Solver-Parameters","page":"Solver Parameters","title":"Solver Parameters","text":"","category":"section"},{"location":"API/solver_parameters/","page":"Solver Parameters","title":"Solver Parameters","text":"A SolverParams object is a WAVI.jl object that stores parameters related to the numerical solution of the governing equations. The following table summarises these parameters","category":"page"},{"location":"API/solver_parameters/","page":"Solver Parameters","title":"Solver Parameters","text":"Keyword Argument Description Default Value\nn_iter_viscosity Maximum number of iterations used in determining implicit viscosity 2\nmaxiter_picard Number of Picard iterations in velocity solve 30\ntol_picard Tolerance at which Picard iteration considered to have converged 1e-5\ntol_coarse Relative tolerance at which the adaptive mesh is coarsened ∘C/m\nmaxiter_coarse Maximum number of coarsening iterations 1000\nlevels Number of wavelet levels 3\nwavelet_threshold  10.0\nnsmooth  5\nsmoother_omega  1.0\nstencil_margin  3","category":"page"},{"location":"test/#WAVI.jl-tests","page":"Unit Testing","title":"WAVI.jl tests","text":"","category":"section"},{"location":"test/","page":"Unit Testing","title":"Unit Testing","text":"WAVI.jl includes a comprehensive suite of unit tests, which help to prevent bugs, ensure code quality, and prevent breaking changes. Scripts to run these tests are held in the /test folder. These tests utilize the Julia unit testing architechture, which provides a streamlined environment for testing.","category":"page"},{"location":"test/","page":"Unit Testing","title":"Unit Testing","text":"WAVI.jl includes 10 individual testing scripts, /test/test_XXXXX.jl. These roughly correspond to each level of the data structure heirarchy, with a couple of extras. They are","category":"page"},{"location":"test/","page":"Unit Testing","title":"Unit Testing","text":"/test/test_fields.jl: test the WAVI.jl fields structures.\n/test/test_grids.jl: test the WAVI.jl grid structures.\n/test/test_kronecker.jl: test the Kronecker product operations used in WAVI.jl.\n/test/test_melt.jl: test the WAVI.jl basal melt rate parametrizations.\n/test/test_models.jl: test the WAVI.jl model structures.\n/test/test_outputting.jl: test the WAVI.jl output writing structures.\n/test/test_simulations.jl: test the WAVI.jl simulation structures.\n/test/test_timesteppingparams.jl: test the WAVI.jl timestepping parameters structures.\n/test/test_utils.jl: test the utility functions employed by WAVI.jl.\n/test/verification_tests.jl: verification tests for the WAVI.jl model. Note that these tests require setup and running of a WAVI.jl simulation and therefore take a while!   ","category":"page"},{"location":"test/","page":"Unit Testing","title":"Unit Testing","text":"Individual unit tests can be run by running the corresponding Julia script (note that WAVI.jl must be installed)","category":"page"},{"location":"test/","page":"Unit Testing","title":"Unit Testing","text":"julia> include('./test/test_XXXXX.jl')","category":"page"},{"location":"test/","page":"Unit Testing","title":"Unit Testing","text":"The output will appear as below (in this case for /test/test_fields.jl). The test summary lists the total number of tests, alongside the number which pass and fail. ","category":"page"},{"location":"test/","page":"Unit Testing","title":"Unit Testing","text":"<center><img src=\"../../assets/test_output.png\" alt=\"\" title=\"\" style=\"max-width: 100%\" /></center>","category":"page"},{"location":"test/","page":"Unit Testing","title":"Unit Testing","text":"The full suite of tests can be run using the runtests.jl script. ","category":"page"},{"location":"test/","page":"Unit Testing","title":"Unit Testing","text":"julia> include('./test/runtests.jl')","category":"page"},{"location":"test/#Continuous-Integration","page":"Unit Testing","title":"Continuous Integration","text":"","category":"section"},{"location":"API/grid/#Grid","page":"Grid","title":"Grid","text":"","category":"section"},{"location":"API/grid/","page":"Grid","title":"Grid","text":"A Grid is a WAVI.jl object that stores information relating to the numerical grid. The key parameters, which are passed via keyword arguments in the OutputParams constructor, are as follows:","category":"page"},{"location":"API/grid/","page":"Grid","title":"Grid","text":"nx: number of x grid points\nny: number of y grid points\nnσ: number of levels in the vertical\ndx: grid spacing in x \ndy: grid spacing in y \nx0: grid origin x co-ordinate \ny0: grid origin y co-ordinate\nh_mask: Array of size nx x ny that defines domain points: ones in the h_mask indicate loations within ice domain, while zeros in the h_mask indicate locations outside of the ice domain. Defaults to trues(nx,ny), corresponding to every grid point being in the ice domain.\nu_iszero: Array of size nx x ny that defines locations of zero velocity in the x-direction: ones in the u_iszero correspond to points where the velocity in the x-direction is forced to be zero, while zeros in the u_iszero array corresponds to points where the velocity is free. Defaults to falses(nx,ny), corresponding to no restrictions on u velocity anywhere. u_iszero can also be specified by an array with entries from \"North\", \"South\", \"East\", and \"West\", which set the corresponding edges of the domain to have zero velocity boundary conditions there.\nv_iszero: As in u_iszero for the velocity in the y-direction.\nσ: Dimensionless locations of sigma (vertical) levels. Values must be increasing between 0 and 1.\nquadrature_weights: weights associated with sigma (vertical) levels used in quadrature scheme to determine depth averaged quantities (e.g. viscosity).","category":"page"},{"location":"API/grid/","page":"Grid","title":"Grid","text":"WAVI.jl has several grids, on which different quantities are defined (see numerical grid). A Grid object contains explicit definitions of these grids; for example, the x-coordinates of the \"h grid\" are stored in grid.xxh (where grid is the name of the Grid instance).","category":"page"},{"location":"API/grid/#WAVI.Grid-Tuple{}","page":"Grid","title":"WAVI.Grid","text":"Grid(; \nnx = 80,\nny = 10,\ndx = 8000.0,\ndy = 8000.0,\nnσ = 4,\nx0 = 0.0,\ny0 = -40000.0,\nh_mask = nothing,\nh_isfixed = nothing,\nu_iszero = nothing,\nv_iszero = nothing,\nbasin_ID = nothing,\nu_isfixed = nothing,\nv_isfixed = nothing)\n\nConstruct a WAVI.jl grid.\n\nKeyword arguments\n\nnx: number of x grid points\nny: number of y grid points\ndx: grid spacing in x \ndy: grid spacing in y \nnσ: number of levels in the vertical\nx0: grid origin x co-ordinate \ny0: grid origin y co-ordinate\nh_mask: Mask defining domain points within grid\n`h_isfixed': Mask defining locations of fixed thickness within grid\nu_iszero: Locations of zero u velocity points\nv_iszero: Locations of zero v velocity points\nu_isfixed: Locations of fixed u velocity points\nv_isfixed: Locations of fixed v velocity points\nquadrature_weights: weights associated with sigma levels used in quadrature scheme\nbasin_ID: grid of basin IDs \n\n\n\n\n\n","category":"method"},{"location":"API/timestepping_params/#Timestepping-Parameters","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"","category":"section"},{"location":"API/timestepping_params/#Overview","page":"Timestepping Parameters","title":"Overview","text":"","category":"section"},{"location":"API/timestepping_params/","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"A TimesteppingParams structure is used to pass information relating to timestepping to the simulation. The following parameters as specified by passing appropriate keyword arguments the TimesteppingParams constructor:","category":"page"},{"location":"API/timestepping_params/","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"niter0: the iteration number at which the simulation. Set niter0 to 0 to initialize a 'clean' simulation, or niter0 to a positive integer to (attempt to) pickup from the a corresponding checkpoint (see Checkpoints and Pickups below)\ndt: the simulation timestep\nend_time: the clock time at which the simulation should terminate\nn_iter_total: the total number of timesteps to be performed. NB: you must specify at least one of end_time and n_iter_total (the simulation must know when it is going to finish!); specifying both is possible, but they must be compatible (i.e the end_time must equal n_iter_total * dt).\nchkpt_freq and pchkpt_freq: the model time interval between outputting temporary and permanent checkpoints, respectively (see Checkpoints and Pickups)\nstep_thickness: a flag which, when turned off (stepthickness = false) turns of thickness updates when timestepping. This is an experimental feature, necessary for coupling WAVI to the MITgcm (see the MITgcm coupling for more info)","category":"page"},{"location":"API/timestepping_params/#Constructor","page":"Timestepping Parameters","title":"Constructor","text":"","category":"section"},{"location":"API/timestepping_params/","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"An instance of a TimesteppingParams is constucted using the TimesteppingParams(;<kwargs>) constructor:","category":"page"},{"location":"API/timestepping_params/#WAVI.TimesteppingParams-Tuple{}","page":"Timestepping Parameters","title":"WAVI.TimesteppingParams","text":"TimesteppingParams(;                     niter0 = 0,                     dt = 1.0,                     endtime = 1.0,                     nitertotal = nothing,                      chkptfreq = Inf,                     pchkptfreq = Inf,                     chkptpath = './',                     step_thickness = true)\n\nConstruct a WAVI.jl TimesteppingParams object. TimesteppingParams stores information relating to timestepping.\n\nKeyword arguments\n\n'niter0': Iteration number of the first timestep. niter0 = 0 corresponds to a new simulation, while niter0 > 0 (positive integer) corresponds to a pickup.\n'dt': Model timestep\n'end_time': Simulation termination time\n'nitertotal': Total number of timesteps counting from zero\n'chkpt_freq': Frequency of outputting temporary checkpoints\n'pchkpt_freq': Frequecy with which permanent checkpoints are pass\n'chkpt_path' : Path to location checkpoint output\n'step_thickness': Toggle whether to update the ice thickness (true) or not (false) at each timestep\n\n\n\n\n\n","category":"method"},{"location":"API/timestepping_params/#Checkpoints-and-Pickups","page":"Timestepping Parameters","title":"Checkpoints and Pickups","text":"","category":"section"},{"location":"API/timestepping_params/","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"Large simulations are computationally expensive, and may take a long time to run. To permit simulations to run for longer than maximum runtime limits which are imposed on many machines, WAVI.jl is equipped with a checkpoint-pickup system that allows the state to be outputted frequently, and the simulation to be picked again from that point. ","category":"page"},{"location":"API/timestepping_params/#Checkpoints","page":"Timestepping Parameters","title":"Checkpoints","text":"","category":"section"},{"location":"API/timestepping_params/","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"Checkpoints contain a snapshot of all of the information on the current state of the simulation. As a result, they may be large and thus outputting checkpoints very frequently is discouraged, except for when debugging simulations which are ran for only a few timesteps (see Simulation Tips)","category":"page"},{"location":"API/timestepping_params/","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"Both temporary and permanent checkpoints are output in jld2 format. The path of both of these is specified by setting the chkpt_path argument in the TimesteppingParams constructor.","category":"page"},{"location":"API/timestepping_params/","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"Temporary checkpoints are outputted every chkpt_freq years (model time). These checkpoints are rolling: first checkpoint 'A' (named chkptA.jld) is written at time chkpt_freq, then checkpoint 'B' (named chkptB.jld) is output at a time 2 * chkpt_freq. Checkpoint 'A' is overwritten at time 3 * chkpt_freq, and so on.","category":"page"},{"location":"API/timestepping_params/","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"Similarly, permanent checkpoints are outputted every pchkpt_freq model years.  These are output sequentially (i.e. not overwritten) as pchkpt_xxxxxxxxx.jld2 where xxxxxxxxxx is the iteration number, prepended by zeros to be ten digits long (e.g. the filename of a checkpoint outputted at timestep number one thousand is chkpt_0000001000.jld).","category":"page"},{"location":"API/timestepping_params/","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"Note that the number of timesteps, rather than the model time, is used to determine when to output the solution: permanent checkpoints are output every floor(pchkpt_freq / dt) timesteps (and similarly for chkpt_freq), so the actual output frequency may not exaclty match that specified by the parameter. ","category":"page"},{"location":"API/timestepping_params/#Pickups","page":"Timestepping Parameters","title":"Pickups","text":"","category":"section"},{"location":"API/timestepping_params/","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"Continuining from the state stored in a checkpoint is initiatied by setting the niter0 parameter to correspond to the number of the timestep to be picked up from. For example, to continue the simulation from a checkpoint outputted at timestep number one thousand, set niter0 = 1000 in the TimesteppingParams constructor.  ","category":"page"},{"location":"API/timestepping_params/","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"WAVI.jl only currently supports pickups from permanent checkpoints. The permanent checkpoint from which a pickup is initiated must be in the local directory.","category":"page"},{"location":"API/timestepping_params/","page":"Timestepping Parameters","title":"Timestepping Parameters","text":"note: Note\nAfter a pickup, WAVI.jl uses the model that was specified in the original simulation that produced the checkpoint. However, to retain the simulation structure, a model must still be passed to simulation Similarly, after picking up, output_params will be as specified in the original simulation that produced the checkpoint. To force a simulation to update to the model and/or output parameters to those just passed, use the pickup_model_update_flag and/or pickup_output_update_flag flags in the simulation constructor (see Simulations). TimesteppingParams are always updated after a pickup.  ","category":"page"},{"location":"examples/bumpy_bed/#Ice-Flow-over-a-Bumpy-Bed","page":"Two-dimensional flow on a bumpy bed","title":"Ice Flow over a Bumpy Bed","text":"","category":"section"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"This is a good first two dimensional example: flow down a plane with a series of bumps superimposed. We consider how the size of the bump affects the flow speed. This example is similar in spirit to Experiment A in the Ice Sheet Model Intercomparison Exercise - Higher Order Model (ISMIP-HOM): doi: 10.5194/tc-2-95-2008","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"This example demonstrates how to     * use WAVI.jl in two horizontal spatial dimensions with arbitrary bed shapes     * how to interact with Grid objects.","category":"page"},{"location":"examples/bumpy_bed/#Install-dependencies","page":"Two-dimensional flow on a bumpy bed","title":"Install dependencies","text":"","category":"section"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"First let's make sure we have all required packages installed.","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"using Pkg\nPkg.add(PackageSpec(url=\"https://github.com/WAVI-ice-sheet-model/WAVI.jl.git\", rev = \"main\"))\nusing WAVI, Plots","category":"page"},{"location":"examples/bumpy_bed/#Basal-Topography","page":"Two-dimensional flow on a bumpy bed","title":"Basal Topography","text":"","category":"section"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"Following ISMIP-HOM, we'll consider a bed with a series of sinusoidal oscillations with an amplitude of 500m: $ z_b(x,y) = -x \\tan \\alpha + 500 \\sin (\\omega x) \\sin(\\omega y) $ Here L is the lengthscale of the domain, alpha is the net slope of the plane, and omega = 2pi  L is the frequency of the bumps. We can express this bed analytically, so we write it as a function and pass it to WAVI that way","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"z_b(x,y; α, ω) = -x * tand(α) + 500sin(ω*x)*sin(ω*y)","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"It's useful to define our model grid here:","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"grid_L(; L, nx = 80,ny = 80) = Grid(nx = nx, ny = ny, dx = L/nx, dy = L/ny, y0 = 0.0, x0 = 0.0);","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"Note that grid_L is a function, it takes a lengthscale L which defines the lengthscale of the domain in both x and y directions (the grid is square) and optional arguments nx and ny, which set the number of grid points, with default value of 80 for both.","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"Let's choose a domain of 80km with 80 grid points","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"L = 80000.\ngrid80 = grid_L(L = L)","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"This grid object contains information about the location of grid points. We use this to construct an array defining the bed from the bed function z_b defined earlier (we don't need this step for the solver, but we do to visualize!). We'll choose the period of the bumps so that we have one peak and one trough in both directions (via the ω parameter)","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"z_b80 = z_b.(grid80.xxh,grid80.yyh; α = 0.5, ω = 2π/L );\nplt = Plots.heatmap(grid80.xxh[:,1]/1e3, grid80.yyh[1,:]/1e3, z_b80, \n                        xlabel = \"x (km)\", \n                        ylabel = \"y (km)\",\n                        colorbar_title = \"\\n bed depth (m)\",\n                        right_margin = 4Plots.mm)\nplot!(size = (600,400))","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"<center><img src=\"../../assets/example-plots/bumpy/bed.png\" alt=\"\" title=\"\" style=\"max-width: 100%\" /></center>","category":"page"},{"location":"examples/bumpy_bed/#Model-Instantiation-and-Initial-Conditions","page":"Two-dimensional flow on a bumpy bed","title":"Model Instantiation and Initial Conditions","text":"","category":"section"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"In the ISMIP-HOM comparison, the main test is velocity along the line y = L4, for various different values of L. Before we do that, lets look at the velocity for the example we started above with L = 80km. ","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"To begin, we create an InitialConditions object to prescribe the ice thickness of 1000m everywhere","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"initial_conditions = InitialConditions(initial_thickness = 1000. .* ones(grid80.nx, grid80.ny))","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"Now we can build our model","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"model80 = Model(grid = grid80, \n            bed_elevation = z_b80,\n            initial_conditions = initial_conditions)","category":"page"},{"location":"examples/bumpy_bed/#Determining-the-velocity","page":"Two-dimensional flow on a bumpy bed","title":"Determining the velocity","text":"","category":"section"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"To bring the velocity in line with the ice thickness, we use the update_state! function:","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"update_state!(model80)","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"Now we can look at the velocity:","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"Plots.heatmap(model80.grid.xxh[:,1]/1e3, model80.grid.yyh[1,:]/1e3, model80.fields.gh.u', \n                        xlabel = \"x (km)\", \n                        ylabel = \"y (km)\",\n                        right_margin = 4Plots.mm,\n                        colorbar_title = \"\\n ice velocity in x-direction (m/yr)\")\nplot!(size = (600,400))","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"<center><img src=\"../../assets/example-plots/bumpy/velocity_L80.png\" alt=\"\" title=\"\" style=\"max-width: 100%\" /></center>","category":"page"},{"location":"examples/bumpy_bed/#Different-lengthscales","page":"Two-dimensional flow on a bumpy bed","title":"Different lengthscales","text":"","category":"section"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"Now let's look at how the velocity along a flowline changes with the lengthscale of the domain L. Note that the bumps stay the same size, so as L increases, the aspect ratio of the bumps reduces, and we might expect they influence the flow less.","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"First we define the L values we're interested in","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"L_values =  [160, 80, 40, 20, 10, 5]*1.0e3;","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"We loop over these values and store the info:","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"U_flowline = zeros(80, length(L_values));\ngrid_flowline = zeros(80, length(L_values)); # initialize storage of the the velocity (U_flowline) and x-coordinates (grid_flowline)\nfor (count,L) in enumerate(L_values) ;\n    gridL = grid_L(L = L); #make the grid with this value of L\n    z_bL = z_b.(gridL.xxh,gridL.yyh; α = 0.5, ω = 2π/L ); #make the bed with this grid\n    initial_conditions = InitialConditions(initial_thickness = 1000. .* ones(80, 80)); #initial thickness of 1000m everywhere\n    model = Model(grid = gridL, \n                bed_elevation = z_bL,\n                initial_conditions = initial_conditions);  #build model\n    update_state!(model); #get the velocity assoiciated with geometry\n    grid_flowline[:, count] .= model.grid.xxh[:, round(Int, gridL.nx/4)]; #extract coordinates along line\n    U_flowline[:,count] .= model.fields.gh.u[:, round(Int, gridL.nx/4)]; #get velocity along line\nend","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"And make the plot:","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"p = plot()\n#first normalize the co-ordinates\nnormalized_grid_flowline = zeros(size(grid_flowline))\nfor i = 1:(size(L_values)[1])\n    plot!(grid_flowline[:,i]./L_values[i]/1e3,\n    U_flowline[:,i], \n    framestyle = :box, \n    xlabel = \"x/L (km)\", \n    ylabel = \"horizontal velocity (m/yr)\",\n    label = L_values[i])\nend\ndisplay(p)\nplot!(size = (1000,550))","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"<center><img src=\"../../assets/example-plots/bumpy/velocity_diffL.png\" alt=\"\" title=\"\" style=\"max-width: 100%\" /></center>","category":"page"},{"location":"examples/bumpy_bed/","page":"Two-dimensional flow on a bumpy bed","title":"Two-dimensional flow on a bumpy bed","text":"As expected, when the bumps have a smaller aspect ratio (smaller L) the flow speed is smaller.","category":"page"},{"location":"contact/#Contact-Us","page":"Contact us","title":"Contact Us","text":"","category":"section"},{"location":"contact/","page":"Contact us","title":"Contact us","text":"We always welcome people getting in touch, whether that's to report issues and/or bugs, suggest or request features, asking for help, discuss collaborations, or simply to say hi!  ","category":"page"},{"location":"contact/","page":"Contact us","title":"Contact us","text":"There are several ways to get in touch:","category":"page"},{"location":"contact/","page":"Contact us","title":"Contact us","text":"Email\nTo submit bug reports or feature requests, go to our github issues page ","category":"page"},{"location":"physics/governing_equations/#Governing-Equations","page":"Governing Equations","title":"Governing Equations","text":"","category":"section"},{"location":"physics/governing_equations/#Preliminaries","page":"Governing Equations","title":"Preliminaries","text":"","category":"section"},{"location":"physics/governing_equations/","page":"Governing Equations","title":"Governing Equations","text":"WAVI.jl uses a Cartesian co-ordinate system mathbfx = (xyz), with z positive upwards; the corresponding velocity components are mathbfu = (uvw). We use bar notation to denote depth averaged quantities, for example:","category":"page"},{"location":"physics/governing_equations/","page":"Governing Equations","title":"Governing Equations","text":"    beginequation\n        barf =frac1h int_z = b(xy)^z = s(xyt)fmathrmdz\n    endequation","category":"page"},{"location":"physics/governing_equations/","page":"Governing Equations","title":"Governing Equations","text":"is the depth average of the quantity f. Here, t is the denotes time, b(xy) is the (known) bed elevation (measured positive upwards), and s(xyt) is the surface elevation. ","category":"page"},{"location":"physics/governing_equations/","page":"Governing Equations","title":"Governing Equations","text":"We assume that the ice is in hydrostratic equilibrium, so that regions are with h  -(rho_irho_w) b are floating, and regions with h geq -(rho_irho_w) b are grounded, where rho_i and rho_w the ice and ocean density, respectively.  Where the ice is grounded, we have s = h + b, while where the ice is floating, the hydrostratic assumption enforces s = (1 - rho_irho_w)h.","category":"page"},{"location":"physics/governing_equations/","page":"Governing Equations","title":"Governing Equations","text":"WAVI.jl solves equations describing conservation of momentum and conservation of mass for mathbfbaru(xyt) = (baru(xyt) barv(xyt)), the depth averaged velocity components in the (xy) directions, respectively, and the ice thickness h(xyt)","category":"page"},{"location":"physics/governing_equations/#Conservation-of-Momentum","page":"Governing Equations","title":"Conservation of Momentum","text":"","category":"section"},{"location":"physics/governing_equations/","page":"Governing Equations","title":"Governing Equations","text":"Conservation of momentum requires that the baru and barv satisfy ([1]):","category":"page"},{"location":"physics/governing_equations/","page":"Governing Equations","title":"Governing Equations","text":"beginalign\n    fracpartialpartial xleft(4 baretah fracpartial barupartial x + 2 baretah fracpartial barvpartial y)right) +    fracpartialpartial yleft(baretah fracpartial barvpartial x +  baretah fracpartial barupartial yright) - tau_bx = rho_i g h fracpartial spartial x labelEx-momentum\n    fracpartialpartial yleft(4 baretah fracpartial barvpartial y + 2 baretah fracpartial barupartial x)right) +    fracpartialpartial xleft(baretah fracpartial barupartial y +  baretah fracpartial barvpartial xright) - tau_by = rho_i g h fracpartial spartial ylabelEy-momentum\nendalign","category":"page"},{"location":"physics/governing_equations/","page":"Governing Equations","title":"Governing Equations","text":"where rho_i is the ice density, g is the gravitational acceleration, mathbftau_b = (tau_bx tau_by) is the basal drag in the (xy) directions, and eta is the ice viscosity, defined implicity in terms of the velocity components (the strain components are themselves functions of eta, see below):","category":"page"},{"location":"physics/governing_equations/","page":"Governing Equations","title":"Governing Equations","text":"beginequationlabelEviscosity\n    eta = fracB2 leftleft(fracpartial barupartial xright)^2  + left(fracpartial barvpartial yright)^2 + fracpartial barupartial xfracpartial barvpartial y + frac14left( fracpartial barupartial y + fracpartial barupartial xright)^2 + frac14left(fracpartial barupartial zright)^2 + left(fracpartial barvpartial zright)^2 + epsilon^2right^frac1-n2n\nendequation","category":"page"},{"location":"physics/governing_equations/","page":"Governing Equations","title":"Governing Equations","text":"Here n is the exponent in a nonlinear Glen flow law, epsilon is a regularization parameter that prevents the viscosity becoming unbounded at small strain rates (for small strain rates, eta is constant, corresponding to a linear rheology), and B(xyz) is a temperature-dependent coefficient that determines the stiffness of the ice. ","category":"page"},{"location":"physics/governing_equations/#Boundary-Conditions","page":"Governing Equations","title":"Boundary Conditions","text":"","category":"section"},{"location":"physics/governing_equations/","page":"Governing Equations","title":"Governing Equations","text":"The momentum equations are solved alongside boundary conditions at the lateral boundary of the ice sheet,","category":"page"},{"location":"physics/governing_equations/","page":"Governing Equations","title":"Governing Equations","text":"    beginalign\n        -frac12rho_w  h_w^2 hatn_x = 2baretahleft(2 fracpartial barupartial x + fracpartial barvpartial yright)hatn_x - frac12rho_i g h^2 hatn_x + baretah left(fracpartial barupartial y + fracpartial barvpartial xright)hatn_ylabelEbc1\n        -frac12rho_w  h_w^2 hatn_y = 2baretahleft(2 fracpartial barvpartial y + fracpartial barupartial xright)hatn_y - frac12rho_i g h^2 hatn_y + baretah left(fracpartial barupartial y + fracpartial barvpartial xright)hatn_x labelEbc2\n     endalign","category":"page"},{"location":"physics/governing_equations/","page":"Governing Equations","title":"Governing Equations","text":"which impose continuity of depth-integrated momentum there. In \\eqref{E:bc1}–\\eqref{E:bc2}, h_w = max(h - s + zeta 0) is the thickness of ice below the water level, where zeta is the sea level with respect to z = 0, and hatmathbfn = (hatn_x hatn_y) is the normal to the lateral boundary. ","category":"page"},{"location":"physics/governing_equations/","page":"Governing Equations","title":"Governing Equations","text":"In addition, a Robin boundary condition at the bed linearly relates the basal stress tau_b = (tau_bxtau_by) to the basal velocity mathbfu_b via a multiplicative drag coefficient beta:","category":"page"},{"location":"physics/governing_equations/","page":"Governing Equations","title":"Governing Equations","text":"    beginalign\n        tau_b = beta  mathbfu_b\n    endalign","category":"page"},{"location":"physics/governing_equations/","page":"Governing Equations","title":"Governing Equations","text":"(A no-stress condition at the surface is also implicit in the derivation of \\eqref{E:x-momentum}–\\eqref{E:y-momentum}.)","category":"page"},{"location":"physics/governing_equations/#Conservation-of-Mass","page":"Governing Equations","title":"Conservation of Mass","text":"","category":"section"},{"location":"physics/governing_equations/","page":"Governing Equations","title":"Governing Equations","text":"For a given depth-averaged velocity mathbfbaru, accumulation rate a(xyt) (positive for ice gain), and basal melt rate m(xyt) (positive for ice loss), conservation of ice mass requires that the ice thickness h satisfies","category":"page"},{"location":"physics/governing_equations/","page":"Governing Equations","title":"Governing Equations","text":"    beginequationlabelEmass_cons\n        fracpartial hpartial t = a - m - nabla left(h mathbfuright)\n    endequation","category":"page"},{"location":"physics/melting/#Melt-Rates","page":"Basal Melt Rate Parametrizations","title":"Melt Rates","text":"","category":"section"},{"location":"physics/melting/","page":"Basal Melt Rate Parametrizations","title":"Basal Melt Rate Parametrizations","text":"WAVI.jl includes a number of community melt rate parametrizations of melt rate:","category":"page"},{"location":"physics/melting/","page":"Basal Melt Rate Parametrizations","title":"Basal Melt Rate Parametrizations","text":"Input file melt rates \nQuadratic temperature parametrization\nPlume emulator parametrization\nPICO parametrization\nPICOP parametrization","category":"page"},{"location":"physics/melting/","page":"Basal Melt Rate Parametrizations","title":"Basal Melt Rate Parametrizations","text":"Further details of these parametrizations can be found on this page. Much of these descriptions is taken from [[2]], which describes a thorough assessment of different melt rate parametrizations. For details of the use of melt rate parametrizations in WAVI.jl, see the melt rate models section. We strongly encourage those who have developed melt rate parametrizations to consider implementing them in WAVI.jl; if you are interested in doing so, see the melt rate models and contributors guide(../contributing.md), or get in touch.","category":"page"},{"location":"physics/melting/","page":"Basal Melt Rate Parametrizations","title":"Basal Melt Rate Parametrizations","text":"WAVI.jl also supports coupling to the ocean model MITgcm. Please get in touch, or see the MITgcm coupling tab if you are interested in running coupled WAVI.jl-MITgcm simulations.","category":"page"},{"location":"physics/melting/#Input-File-Melt-Rate-Parametrizations","page":"Basal Melt Rate Parametrizations","title":"Input File Melt Rate Parametrizations","text":"","category":"section"},{"location":"physics/melting/#Quadratic-Temperature-Melt-Rate-Parametrization","page":"Basal Melt Rate Parametrizations","title":"Quadratic Temperature Melt Rate Parametrization","text":"","category":"section"},{"location":"physics/melting/","page":"Basal Melt Rate Parametrizations","title":"Basal Melt Rate Parametrizations","text":"The quadratic temperature melt rate parametrization [[3]] parametrizes the melt rate as a quadratic function of the thermal driving:","category":"page"},{"location":"physics/melting/","page":"Basal Melt Rate Parametrizations","title":"Basal Melt Rate Parametrizations","text":"beginequationlabelEquadratic_parametrization\nM = gamma_T left( fracrho_w c_prho_i L right) left(T_0 - T_F right)^2\nendequation","category":"page"},{"location":"physics/melting/","page":"Basal Melt Rate Parametrizations","title":"Basal Melt Rate Parametrizations","text":"Here gamma_T is a heat exchange velocity, rho_w is the density of water, rho_i is the density of ice, c_p is the heat capacity of the ocean, L is the latent heat of fusion of ice. In addition, T_F = lambda_1 S_0 + lambda_2 + lambda_3 z_b is the local freezing point, with lambda_1, lambda_2, and lambda_3 the liquidus slope, intercept, and pressure coefficient, respectively, and z_b the height of the ice shelf draft above sea level (i.e. z_b is negative).  T_0 and S_0 are the depth-dependent potential temperatre and practical salinity taken from the far field.","category":"page"},{"location":"physics/melting/","page":"Basal Melt Rate Parametrizations","title":"Basal Melt Rate Parametrizations","text":"The quadratic formulation \\eqref{E:quadratic_parametrization} attempts to account for heat providing both more heat for melting and the feedback between sub-shelf melting and circulation in the cavity (higher temperatures result in a more vigorous circulation, promoting enhanced melt rates).","category":"page"},{"location":"physics/melting/#Plume-Emulator-Melt-Rate-Parametrization","page":"Basal Melt Rate Parametrizations","title":"Plume Emulator Melt Rate Parametrization","text":"","category":"section"},{"location":"physics/melting/","page":"Basal Melt Rate Parametrizations","title":"Basal Melt Rate Parametrizations","text":"The plume emulator melt rate parametrization from [4] emulates the 2-D behaviour of the 1-D plume model of [5]. This model describes the evolution of a buoyant plume originating from the grounding line with zero thickness and velocity, and temperature and salinity taken from the ambient ocean. Away from the grounding line, the thickness, velocity, temperature, and salinity of the plume evolve through advection, turbulent exchange across the ocean boundary layer underneath the ice shelf, and entrainment of deep water. ","category":"page"},{"location":"physics/melting/","page":"Basal Melt Rate Parametrizations","title":"Basal Melt Rate Parametrizations","text":"The melt rate in the plume model emulator can be expressed as ","category":"page"},{"location":"physics/melting/","page":"Basal Melt Rate Parametrizations","title":"Basal Melt Rate Parametrizations","text":"beginequationlabelEplume_parametrization\nM = alpha M_0 g(theta)(T_0 - T_Fgl)^2 hatM(hatX)\nendequation","category":"page"},{"location":"physics/melting/","page":"Basal Melt Rate Parametrizations","title":"Basal Melt Rate Parametrizations","text":"where M_0 is a the melt rate prefactor, alpha is a calibration coefficient, g(theta) is an expression of the mean basal slope at shelf points and hatM is a universal, dimensionless function of hatX, an expression for the dimensionless distance from the grounding line. The mean basal slope theta and dimensionless distance hatX are determined using a path-finding algorithm that is described in detail in [4].","category":"page"},{"location":"physics/melting/#PICO-Melt-Rate-Parametrization","page":"Basal Melt Rate Parametrizations","title":"PICO Melt Rate Parametrization","text":"","category":"section"},{"location":"physics/melting/","page":"Basal Melt Rate Parametrizations","title":"Basal Melt Rate Parametrizations","text":"The Potsdam Ice-shelf Cavity mOdel (PICO) melt rate from [6] is based on a one-dimensional ocean box-model which coarsely resolves ice shelf cavities. The box model represents the buoyancy-driven advection of ambient ocean water into the ice-shelf cavity at depth up to the grounding line, then upward along the ice draft in consecutive boxes. The melt rates in the box model are given by ","category":"page"},{"location":"physics/melting/","page":"Basal Melt Rate Parametrizations","title":"Basal Melt Rate Parametrizations","text":"beginequationlabelEpico_parametrization\nM = gamma_T left( fracrho_w c_prho_i L right) left(T_0 - T_Fk right)\nendequation","category":"page"},{"location":"physics/melting/","page":"Basal Melt Rate Parametrizations","title":"Basal Melt Rate Parametrizations","text":"where the subscript k indicates properties evaluated in box k.  Those properties account for the transformation of ocean temperature and salinity in consecutive boxes through heat and salt turbulent exchange across the ocean boundary layer underneath ice shelves.","category":"page"},{"location":"physics/melting/#PICOP-Melt-Rate-Parametrization","page":"Basal Melt Rate Parametrizations","title":"PICOP Melt Rate Parametrization","text":"","category":"section"},{"location":"physics/melting/","page":"Basal Melt Rate Parametrizations","title":"Basal Melt Rate Parametrizations","text":"The PICOp melt rate parametrization from [Pelle2019] is a coupling between the PICO and Plume Emulator melt rate parametrizations. This parametrization uses the box model formulation of PICO, but the melt rate within each box is determined using the plume parametrization melt rate \\eqref{E:plumeparametrization}, rather than \\eqref{E:picoparametrization}.","category":"page"},{"location":"API/model/#Models","page":"Models","title":"Models","text":"","category":"section"},{"location":"API/model/","page":"Models","title":"Models","text":"A Model is a WAVI.jl strcutures that contain all the information about the current state, parameters, initial conditions, and process parametrizations. An instance of a Model contains the following fields:","category":"page"},{"location":"API/model/","page":"Models","title":"Models","text":"grid: an instance of a WAVI.jl Grid object, that stores information about the numerical grid.\nparams: an instance of a WAVI.jl Params object that stores phyiscal parameters that enter the model.\nsolver_params: an instance of a WAVI.jl SolverParams object that stores parameters relating to the numerical solution of the governing equations (see numerical implementation).\ninitial_conditions: an instance of a WAVI.jl InitialConditions object that stores initial data on the ice thickness, ice viscosity, ice temperature, and ice damage.\nfields: an instance of a WAVI.jl Fields structure that stores information relating to the current state of the model on the various grids used in the solution (see numerical implementation for more information on these grids)\nextra_physics: a dictionary that stores process parametrizations used in the ice sheet model (see process parametrizations for more information).","category":"page"},{"location":"API/model/#Model-Construction","page":"Models","title":"Model Construction","text":"","category":"section"},{"location":"API/model/","page":"Models","title":"Models","text":"A Model is constructed using the Model(;<kwargs>) constructor (a function that constructs an instance of a Model). Here <kwargs> is shorthand for keyword arguments, allow the Model to be configured, some are optional and others are not (see below):","category":"page"},{"location":"API/model/#WAVI.Model-Tuple{}","page":"Models","title":"WAVI.Model","text":"Model(;\n    grid = nothing, \n    bed_elevation = nothing,\n    params = Params(),\n    solver_params = SolverParams(),\n    initial_conditions = InitialConditions(),\n    melt_rate = UniformMeltRate(),\n    parallel_spec = BasicParallelSpec())\n\nConstruct a WAVI.jl model object.\n\nKeyword arguments\n\ngrid: (required) an instance of a Grid object, which defines the computational grid\nbed_elevation: (required) an array of size grid.nx x grid.ny which defines the bed elevation\nparams: a Params object that defines physical parameters \nsolver_params: a SolverParams object that defines parameters relating to the numerical scheme\ninitial_conditions: an InitialConditions object that (optionally) defines the initial ice thickness, temperature, viscosity, and damage\nmelt_rate: a melt rate model, responsible for controlling/setting the basal melt rate\nparallel_spec: specification of parallel computation method.\n\n\n\n\n\n","category":"method"},{"location":"examples/stochastic_forcing/#Ice-Sheet-behaviour-under-stochastic-forcing","page":"Ice sheet retreat under stochastic forcing","title":"Ice Sheet behaviour under stochastic forcing","text":"","category":"section"},{"location":"examples/stochastic_forcing/","page":"Ice sheet retreat under stochastic forcing","title":"Ice sheet retreat under stochastic forcing","text":"This example is based on the setup in Bradley et al. (submitted) – coming soon!","category":"page"},{"location":"API/fields/#Fields","page":"Fields","title":"Fields","text":"","category":"section"},{"location":"API/fields/","page":"Fields","title":"Fields","text":"WAVI.jl stores information relating to the solutions on fields, which are stored in the model. Fields are organised based according to the different grids (HGrid, CGrid etc – see Grids) on which quantities are stored. Note that all quantities here are set internally (i.e. they cannot be modified by the user). This page contains a full directory of the quantities defined on each of the Grids: HGrid, UGrid, VGrid, CGrid, SigmaGrid.","category":"page"},{"location":"API/fields/#HGrid","page":"Fields","title":"HGrid","text":"","category":"section"},{"location":"API/fields/","page":"Fields","title":"Fields","text":"The following quantities are stored in the HGrid structure within Fields (accessible via model.fields.gh.<field_name>):","category":"page"},{"location":"API/fields/","page":"Fields","title":"Fields","text":"h: Ice thickness\nb: Bed elevation\ns: Ice surface elevation (s = b + h)\ndhdt: Time rate of change of surface elevation\naccumulation: Ice accumulation rate (postive for mass added to the surface, negative for mass removed)\nbasal_melt: Melt rate applied to the base of the ice sheet (positive for mass removed from the base, negative for mass added).\ngrounded_fraction: Grid cell grounded fraction (zero in the shelf, one in the shelf and interpolated across the grounding line, see Seroussi et al. (2014))\nu: Depth average ice velocity in the x direction.\nv: Depth average ice velocity in the y direction.\nav_speed: Depth averaged ice speed \nus: Surface ice velocity in the x direction.\nvs: Surface ice velocity in the y direction.\nub: Base ice velocity in the x direction.\nvb: Base ice velocity in the y direction.\nbed_speed: Ice speed at the base\nweertman_c: Weertman C drag cofficient\nhaf: The height above floatation\ndsdh: Rate of change of surface elevation with respect to thickness change\nshelf_strain_rate: Strain rate computed using only longitudinal strain components\nβ: Raw multiplicative drag coefficient\nβeff: Effective multiplicative drag coefficient\nτbed: Ice stress at the bed.\nηav: Depth averaged viscosity\nquad_f1: F_1 computed from numerical quadrature\nquad_f2: F_2 computed from numerical quadrature\nmask: boolean matrix that defines the solution space","category":"page"},{"location":"API/fields/","page":"Fields","title":"Fields","text":"For convenience, various utility matrices and rheological operators are also stored on the HGrid:","category":"page"},{"location":"API/fields/","page":"Fields","title":"Fields","text":"crop: diagonal matrix with mask entries on the diagonal \nsamp: boolean matrix that takes full domain to the model domain\nspread: sparse form of the sampling matrix\ndneghηav: -h times bareta\ndimplicit: -rho_i times g times mathrmdt times mathrmdhmathrmds","category":"page"},{"location":"API/fields/#UGrid","page":"Fields","title":"UGrid","text":"","category":"section"},{"location":"API/fields/","page":"Fields","title":"Fields","text":"The following quantities are stored on the UGrid structure within Fields (accessible via model.fields.gu.<field_name>):","category":"page"},{"location":"API/fields/","page":"Fields","title":"Fields","text":"nxu: Number of grid cells in x-direction in the UGrid (equals nx + 1, where nx is the number of grid cells in the x direction in the HGrid).\nnyu: Number of grid cells in y-direction in the UGrid (equals ny, where ny is the number of grid cells in the x direction in the HGrid).\nmask: Mask specifying model domain with respect to the UGrid.\nn: Total number of cells in UGrid.\nlevels: Number of levels in the preconditioner\ndwt: Wavelet matrix product at UGrid points \ns: Ice surface elevation at UGrid points\nh: Ice thickness at UGrid points\ngrounded_fraction: Grounded fraction at UGrid points\nβeff: Effective sliding coefficient at UGrid points.\nu: Ice velocities in the x-direction","category":"page"},{"location":"API/fields/","page":"Fields","title":"Fields","text":"For convenience, various utility matrices and rheological operators are also stored on the UGrid:","category":"page"},{"location":"API/fields/","page":"Fields","title":"Fields","text":"crop: diagonal matrix with mask entries on the diagonal \nsamp: boolean matrix that takes full domain to the model domain\nspread: sparse form of the sampling matrix\ncent: maps quantities from the UGrid to the HGrid\n∂x: matrix representation of differentiation with respect to x \n∂y: matrix representation of differentiation with respect to y","category":"page"},{"location":"API/fields/#VGrid","page":"Fields","title":"VGrid","text":"","category":"section"},{"location":"API/fields/","page":"Fields","title":"Fields","text":"The following quantities are stored on the VGrid structure within Fields (accessible via model.fields.gv.<field_name>):","category":"page"},{"location":"API/fields/","page":"Fields","title":"Fields","text":"nxv: Number of grid cells in x-direction in the VGrid (equals nx, where nx is the number of grid cells in the x direction in the HGrid).\nnyu: Number of grid cells in y-direction in the VGrid (equals ny+1, where ny is the number of grid cells in the x direction in the HGrid).\nmask: Mask specifying model domain with respect to the VGrid.\nn: Total number of cells in VGrid.\nlevels: Number of levels in the preconditioner\ndwt: Wavelet matrix product at VGrid points \ns: Ice surface elevation at VGrid points\nh: Ice thickness at VGrid points\ngrounded_fraction: Grounded fraction at VGrid points\nβeff: Effective sliding coefficient at VGrid points.\nu: Ice velocities in the x-direction","category":"page"},{"location":"API/fields/","page":"Fields","title":"Fields","text":"For convenience, various utility matrices and rheological operators are also stored on the VGrid:","category":"page"},{"location":"API/fields/","page":"Fields","title":"Fields","text":"crop: diagonal matrix with mask entries on the diagonal \nsamp: boolean matrix that takes full domain to the model domain\nspread: sparse form of the sampling matrix\ncent: maps quantities from the VGrid to the HGrid\n∂x: matrix representation of differentiation with respect to x \n∂y: matrix representation of differentiation with respect to y","category":"page"},{"location":"API/fields/#CGrid","page":"Fields","title":"CGrid","text":"","category":"section"},{"location":"API/fields/","page":"Fields","title":"Fields","text":"The following quantities are stored in the CGrid structure within Fields (accessible via model.fields.gc.<field_name>):","category":"page"},{"location":"API/fields/","page":"Fields","title":"Fields","text":"nxc: Number of grid cells in x-direction in the CGrid (equals nx-1, where nx is the number of grid cells in the x direction in the HGrid).\nnyc: Number of grid cells in y-direction in the CGrid (equals ny-1, where ny is the number of grid cells in the x direction in the HGrid).\nmask: Mask specifying model domain with respect to the CGrid.\nn: Total number of cells in CGrid.","category":"page"},{"location":"API/fields/","page":"Fields","title":"Fields","text":"The following utility matrices are also stored on the CGrid","category":"page"},{"location":"API/fields/","page":"Fields","title":"Fields","text":"crop: diagonal matrix with mask entries on the diagonal \nsamp: boolean matrix that takes full domain to the model domain\nspread: sparse form of the sampling matrix\ncent: maps quantities from the CGrid to the HGrid","category":"page"},{"location":"API/fields/#SigmaGrid","page":"Fields","title":"SigmaGrid","text":"","category":"section"},{"location":"API/fields/","page":"Fields","title":"Fields","text":"The following quantities are stored in the SigmaGrid structure within Fields (accessible via model.fields.g3d.<field_name>):","category":"page"},{"location":"API/fields/","page":"Fields","title":"Fields","text":"nxs: Number of grid cells in the x-direction in the SigmaGrid (equals nx, where nx is the number of grid cells in the x direction in the HGrid)\nnvs: Number of grid cells in the y-direction in the SigmaGrid (equals ny, where ny is the number of grid cells in the x direction in the HGrid)\nnxs: Number of levels in the vertical in the SigmaGrid \nσ: Dimensionless levels in the vertical\nζ: Reverse dimensionless vertical levels\nquadrature_weights: weights associated with sigma levels, used in computation of integrals over thickness\nη: three dimensional viscosity field\nθ: three dimensional temperature field\nΦ:  three dimensional damage field\nglen_b: three dimensional field of glen_b values in viscosity calcluations","category":"page"},{"location":"API/overview/#Data-Structure","page":"Overview","title":"Data Structure","text":"","category":"section"},{"location":"API/overview/","page":"Overview","title":"Overview","text":"WAVI.jl uses a hierachical data structure, which is shown schematically below. This page provides a brief overview of each of these structures; you can find out more information about each of these via the tabs in the sidebar.","category":"page"},{"location":"API/overview/","page":"Overview","title":"Overview","text":"<center><img src=\"https://raw.githubusercontent.com/WAVI-ice-sheet-model/WAVI.jl/build-docs/docs/src/assets/structure_flowchart.jpg\" alt=\"\" title=\"\" width=\"500\" height=\"400\" /></center>","category":"page"},{"location":"API/overview/","page":"Overview","title":"Overview","text":"At the top of the hierarchy are Simulations. Simulations are to be ran! A Simulation object must be passed the sub-structures describing the following (terms in brackets are the names of the corresponding structures in WAVI.jl):","category":"page"},{"location":"API/overview/","page":"Overview","title":"Overview","text":"Model (Model):  contains all the information about the current state, parameters, initial conditions, and process parametrizations (see below).\nTimestepping Parameters (TimesteppingParams): contains parameters relating to timestepping (e.g. timestep, number of timesteps etc)\nOutput Parameters (OutputParams): optional structure that contains information relativng to the outputting of solutions (what to output, when to output etc).","category":"page"},{"location":"API/overview/","page":"Overview","title":"Overview","text":"A Model structure contains sub-structures describing the following:","category":"page"},{"location":"API/overview/","page":"Overview","title":"Overview","text":"Grid (Grid): contains information on the discretization of the model domain (e.g. number of grid cells, grid spacing etc)\nPhysical parameters (Params): contains physical parameters (e.g. density of the ice)\nSolver parameters (SolverParams): contains parameters relating to the velocity solver (e.g. maximum number of iterations)\nInitial conditions (InitialConditions): stores initial conditions relating to the ice sheet.\nFields (Fields): stores information on the current state of the model.\nA basal melt rate model (MeltRate): contains information on how basal melting is parametrized in the model. ","category":"page"},{"location":"API/params/#Parameters","page":"Physical Parameters","title":"Parameters","text":"","category":"section"},{"location":"API/params/","page":"Physical Parameters","title":"Physical Parameters","text":"A Params object is a WAVI.jl object that stores parameters related to physical parameters involved in the problem. The following table summarises these parameters:","category":"page"},{"location":"API/params/","page":"Physical Parameters","title":"Physical Parameters","text":"Keyword Argument Description Default Value\ng Gravitional acceleration 9.81 m/s^2\ndensity_ice Ice density 918.0 kg/m^3\ndensity_ocean Ocean density 1028.0 kg/m^3\ngas_const Gas constant used in Arrhenius relation in determining Glen flow parameter 8.314\nsec_per_year Seconds per year 3.16e7 s\ndefault_thickness Default ice thickness choice, value set everywhere if ice thickness is not set 100 m\ndefault_viscosity Default ice viscosity choice, value set everywhere if ice thickness is not set 1e7 Pa a^{1/3}\ndefault_temperature Default ice temperature choice, value set everywhere if ice thickness is not set 265.7 K\ndefault_damage Default dimensionless ice damage choice, value set everywhere if ice thickness is not set 0\naccumulation_rate Accumulation rate. Can be a scalar (same value everywhere), or an array of the same size as the numerical grid. 0.3 m/a\nglen_a_activation_energy Activation energy used in Glen flow law 5.8631e4 J\nglen_a_ref Reference value used in Glen flow law 1.5453e-17\nglen_temperature_ref Reference temperature used in Glen flow law 263.15 K\nglen_n Exponent in Glen flow law 3\nglen_reg_strain_rate Strain rate regularization value, sets a lower bound on the strain rate 1e-5\nweertman_c Sliding coefficient in Weertman sliding law. Can be a scalar (same value everywhere), or an array of the same size as the numerical grid. 1e4  Pa a^{1/3}/m^{1/3}\nweertman_m Exponent in Weertman sliding law 3\nweertman_reg_speed Minimum basal sliding speed 1e-5 m/a\nsea_level_wrt_geoid Reference sea level 0 m\nminimum_thickness Minimum ice thickness (on grid points in ice domain) 50 m","category":"page"},{"location":"API/params/#WAVI.Params-Tuple{}","page":"Physical Parameters","title":"WAVI.Params","text":"Params(; <kwargs>)\n\nConstruct a WAVI.jl parameters object for holding physical parameters.\n\nKeyword arguments\n\ndt: model timestep (NB: simulation timestep set in timestepping params, this value is updated when model embedded to the value specified in timestepping_params when passed to simulation)\ng: gravitational acceleration (m^2 / s)\ndensity_ice: ice density (kg / m^3)\ndensity_ocean: ocean water density (kg / m^3)\ngas_const: gas constant in glen b calculation\nsec_per_year: seconds per year (s)\ndefault_thickness: thickness value reverted to if no initial thickness passed (m)\ndefault_viscosity: viscosity value reverted to if no initial thickness passed (Pa s)\ndefault_temperature: temperature value reverted to if no initial thickness passed (K)\ndefault_damage: damage value reverted to if no initial thickness passed (dimensionless)\naccumulation_rate: uniform accumulation_rate (m/yr)\nglen_a_activation_energy: activation energy in glen b calculation\nglen_a_ref: array of glen a reference values used in glen b calculation\nglen_temperature_ref: reference temperature using in glen b calculation\nglen_n: exponent in glen b calculation\nglen_reg_strain_rate: strain rate regularization value\nweertman_c: basal sliding field of coefficients\nweertman_m: sliding law exponent\nweertman_reg_speed: regularization speed, used to prevent bed speed going to zero\nsea_level_wrt_geoid: reference sea level\nminimum_thickness: minimum ice thickness on model domain\nevolveShelves: flag for turning on and off the evolution of the shelves in the forward run_simulation\nsmallHAF: small value of HAF used within update_thickness when not evolving shelves\n\n\n\n\n\n","category":"method"},{"location":"physics/calving/#Calving","page":"Calving","title":"Calving","text":"","category":"section"},{"location":"physics/calving/","page":"Calving","title":"Calving","text":"What is calving?\nWhy is it important for dynamics?\nHow does WAVI deal with calving fronts?","category":"page"},{"location":"mitgcm_coupling/#MITgcm-coupling","page":"MITgcm coupling","title":"MITgcm coupling","text":"","category":"section"},{"location":"mitgcm_coupling/","page":"MITgcm coupling","title":"MITgcm coupling","text":"MITgcm coupling with WAVI is an experimental feature. Check back soon for more info, or (get in touch)[mailto:aleey@bas.ac.uk]","category":"page"},{"location":"#WAVI.jl-documentation","page":"Home","title":"WAVI.jl documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"WAVI.jl is an ice sheet model for everyone.","category":"page"},{"location":"","page":"Home","title":"Home","text":"WAVI.jl is a software package to simulate the flow of ice sheets. At its heart, it is a piece of software that solves equations that describe the flow of ice on continental lengthscales. Here are WAVI.jl, we're trying to make our code as accessible and friendly as possible. ","category":"page"},{"location":"#Getting-Help","page":"Home","title":"Getting Help","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Our accessible and friendly mantra extends to reaching out: please do not hesistate to get in touch. We welcome any conversation, whether you're interested in using WAVI.jl, are trying to figure out how get started, are stuck with a thorny problem, or interested in collaboration.","category":"page"},{"location":"#News","page":"Home","title":"News","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Coming soon!","category":"page"}]
}
